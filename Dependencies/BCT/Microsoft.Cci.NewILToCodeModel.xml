<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Microsoft.Cci.NewILToCodeModel</name>
  </assembly>
  <members>
    <member name="M:Microsoft.Cci.ILToCodeModel.AnonymousDelegateInserter.GenericArgumentsDoNotMatchGenericParameters(System.Collections.Generic.IEnumerable{Microsoft.Cci.ITypeReference})">
      <summary>
            A compiler method that was generated from the body of an anonymous delegate inside a generic method will itself be generic and will be instantiated with the
            generic parameters of the generic method. Return false if this is not the case, so that the caller knows that it is not dealing with an anonymous method.
            </summary>
      <requires csharp="genericArguments != null" vb="genericArguments &lt;&gt; Nothing">genericArguments != null</requires>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.ClosureFieldMapper">
      <summary>
            The purpose of this traverser is to discover the mapping between fields in a closure state class and the original locals and parameters that were
            captured into the closure state class, so that we can substitute field accesses with local and parameter accesses during decompilation of anonymous
            delegates. Things are complicated by having to deal with a variety of compilers that potentially use different name mangling schemes
            and moreover we might not have a PDB file available and so might not know the name of a local or parameter. The bottom line is that we
            cannot rely on naming conventions. Generally, we rely on the source operand of the first assignment to a state field as providing the local
            or parameter that is being captured. However, if an anonymous delegate uses a local that is not used outside of it (or other anonymous delegates)
            then a compiler (such as, alas, the C# compiler) might provide a state field for the local while not actually defining a real local of inserting
            an assignment to capture the value of the local in the state class before constructing a closure. We therefore recurse into anonymous delegate 
            bodies to find assignments to state fields, assume those are captured locals, and then dummy up locals for use in the decompiled method.
            </summary>
      <invariant>this.host != null</invariant>
      <invariant>this.method != null</invariant>
      <invariant>this.closures != null</invariant>
      <invariant>this.closureFieldToLocalOrParameterMap != null</invariant>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.DecompilerOptions">
      <summary>
            Options that are used to control how much decompilation happens.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.ILToCodeModel.DecompilerOptions.None">
      <summary>
            Default value: all flags are false.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.ILToCodeModel.DecompilerOptions.AnonymousDelegates">
      <summary>
            True if display classes should be decompiled into anonymous delegates.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.ILToCodeModel.DecompilerOptions.Iterators">
      <summary>
            True if iterator classes should be decompiled into iterator methods.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.ILToCodeModel.DecompilerOptions.Loops">
      <summary>
            True if loop structures should be decompiled into high-level loops (for-statements, while-statements, etc.)
            </summary>
    </member>
    <member name="F:Microsoft.Cci.ILToCodeModel.DecompilerOptions.Unstack">
      <summary>
            True if all explicit mention of the stack should be decompiled into assignments/uses of locals.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.ILToCodeModel.DecompilerOptions.ReadOnly">
      <summary>
            The final methods are not going to be modified, so provide original IL instructions and handler data.
            </summary>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.Decompiler">
      <summary>
            Provides methods that convert a given Metadata Model into an equivalent Code Model. 
            </summary>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.Decompiler.GetCodeModelFromMetadataModel(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IAssembly,Microsoft.Cci.PdbReader,Microsoft.Cci.ILToCodeModel.DecompilerOptions)">
      <summary>
            Returns a mutable Code Model assembly that is equivalent to the given Metadata Model assembly,
            except that in the new assembly method bodies also implement ISourceMethodBody.
            </summary>
      <param name="host">An object representing the application that is hosting this decompiler. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.</param>
      <param name="assembly">The root of the Metadata Model to be converted to a Code Model.</param>
      <param name="pdbReader">An object that can map offsets in an IL stream to source locations and block scopes. May be null.</param>
      <param name="options">Set of options that control decompilation.</param>
      <requires csharp="host != null" vb="host &lt;&gt; Nothing">host != null</requires>
      <requires csharp="assembly != null" vb="assembly &lt;&gt; Nothing">assembly != null</requires>
      <requires csharp="!(assembly is Microsoft.Cci.Dummy)" vb="Not assembly Is Microsoft.Cci.Dummy">!(assembly is Microsoft.Cci.Dummy)</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.Decompiler.GetCodeModelFromMetadataModel(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IModule,Microsoft.Cci.PdbReader,Microsoft.Cci.ILToCodeModel.DecompilerOptions)">
      <summary>
            Returns a mutable Code Model module that is equivalent to the given Metadata Model module,
            except that in the new module method bodies also implement ISourceMethodBody.
            </summary>
      <param name="host">An object representing the application that is hosting this decompiler. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.</param>
      <param name="module">The root of the Metadata Model to be converted to a Code Model.</param>
      <param name="pdbReader">An object that can map offsets in an IL stream to source locations and block scopes. May be null.</param>
      <param name="options">Set of options that control decompilation.</param>
      <requires csharp="host != null" vb="host &lt;&gt; Nothing">host != null</requires>
      <requires csharp="module != null" vb="module &lt;&gt; Nothing">module != null</requires>
      <requires csharp="!(module is Microsoft.Cci.Dummy)" vb="Not module Is Microsoft.Cci.Dummy">!(module is Microsoft.Cci.Dummy)</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.Decompiler.GetCodeModelFromMetadataModel(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IMethodBody,Microsoft.Cci.PdbReader,Microsoft.Cci.ILToCodeModel.DecompilerOptions)">
      <summary>
            Returns a (mutable) Code Model SourceMethod body that is equivalent to the given Metadata Model method body.
            It does *not* delete any helper types.
            </summary>
      <param name="host">An object representing the application that is hosting this decompiler. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.</param>
      <param name="methodBody">The Metadata Model method body that is to be decompiled.</param>
      <param name="pdbReader">An object that can map offsets in an IL stream to source locations and block scopes. May be null.</param>
      <param name="options">Set of options that control decompilation.</param>
      <requires csharp="host != null" vb="host &lt;&gt; Nothing">host != null</requires>
      <requires csharp="methodBody != null" vb="methodBody &lt;&gt; Nothing">methodBody != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.Decompiler.GetCodeModelFromMetadataModelHelper(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IModule,Microsoft.Cci.ISourceLocationProvider,Microsoft.Cci.ILocalScopeProvider,Microsoft.Cci.ILToCodeModel.DecompilerOptions)">
      <summary>
            Returns a mutable Code Model module that is equivalent to the given Metadata Model module,
            except that in the new module method bodies also implement ISourceMethodBody.
            </summary>
      <param name="host">An object representing the application that is hosting this decompiler. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.</param>
      <param name="module">The root of the Metadata Model to be converted to a Code Model.</param>
      <param name="sourceLocationProvider">An object that can map some kinds of ILocation objects to IPrimarySourceLocation objects. May be null.</param>
      <param name="localScopeProvider">An object that can provide information about the local scopes of a method. May be null.</param>
      <param name="options">Set of options that control decompilation.</param>
      <requires csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        Microsoft.Cci.ILToCodeModel.Decompiler.&lt;&gt;c__DisplayClass1 local_3 = new Microsoft.Cci.ILToCodeModel.Decompiler.&lt;&gt;c__DisplayClass1();&#xD;&#xA;    }&#xD;&#xA;    return host != null; })()" vb="(() =&gt; {&#xD;&#xA;    Microsoft.Cci.ILToCodeModel.Decompiler.&lt;&gt;c__DisplayClass1 local_3 = New Microsoft.Cci.ILToCodeModel.Decompiler.&lt;&gt;c__DisplayClass1();&#xD;&#xA;    return host &lt;&gt; Nothing; })()">(() =&gt; {
    {
        Microsoft.Cci.ILToCodeModel.Decompiler.&lt;&gt;c__DisplayClass1 local_3 = new Microsoft.Cci.ILToCodeModel.Decompiler.&lt;&gt;c__DisplayClass1();
    }
    return host != null; })()</requires>
      <requires csharp="module != null" vb="module &lt;&gt; Nothing">module != null</requires>
      <requires csharp="!(module is Microsoft.Cci.Dummy)" vb="Not module Is Microsoft.Cci.Dummy">!(module is Microsoft.Cci.Dummy)</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.Decompiler.LocalScopeProvider">
      <summary>
            An object that can provide information about the local scopes of a method.
            </summary>
      <invariant>this.originalLocalScopeProvider != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.Decompiler.LocalScopeProvider.#ctor(Microsoft.Cci.ILocalScopeProvider)">
      <summary>
            An object that can provide information about the local scopes of a method.
            </summary>
      <param name="originalLocalScopeProvider">The local scope provider to use for methods that have not been decompiled.</param>
      <requires csharp="originalLocalScopeProvider != null" vb="originalLocalScopeProvider &lt;&gt; Nothing">originalLocalScopeProvider != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.Decompiler.LocalScopeProvider.GetIteratorScopes(Microsoft.Cci.IMethodBody)">
      <summary>
            Returns zero or more local (block) scopes, each defining an IL range in which an iterator local is defined.
            The scopes are returned by the MoveNext method of the object returned by the iterator method.
            The index of the scope corresponds to the index of the local. Specifically local scope i corresponds
            to the local stored in field &lt;localName&gt;x_i of the class used to store the local values in between
            calls to MoveNext.
            </summary>
      <param name="methodBody" />
      <returns />
      <requires inheritedFrom="M:Microsoft.Cci.ILocalScopeProvider.GetIteratorScopes(Microsoft.Cci.IMethodBody)" inheritedFromTypeName="ILocalScopeProvider" csharp="methodBody != null" vb="methodBody &lt;&gt; Nothing">methodBody != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.ILocalScopeProvider.GetIteratorScopes(Microsoft.Cci.IMethodBody)" inheritedFromTypeName="ILocalScopeProvider" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.Decompiler.LocalScopeProvider.GetLocalScopes(Microsoft.Cci.IMethodBody)">
      <summary>
            Returns zero or more local (block) scopes into which the CLR IL operations in the given method body is organized.
            </summary>
      <param name="methodBody" />
      <returns />
      <requires inheritedFrom="M:Microsoft.Cci.ILocalScopeProvider.GetLocalScopes(Microsoft.Cci.IMethodBody)" inheritedFromTypeName="ILocalScopeProvider" csharp="methodBody != null" vb="methodBody &lt;&gt; Nothing">methodBody != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.ILocalScopeProvider.GetLocalScopes(Microsoft.Cci.IMethodBody)" inheritedFromTypeName="ILocalScopeProvider" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.Decompiler.LocalScopeProvider.GetNamespaceScopes(Microsoft.Cci.IMethodBody)">
      <summary>
            Returns zero or more namespace scopes into which the namespace type containing the given method body has been nested.
            These scopes determine how simple names are looked up inside the method body. There is a separate scope for each dotted
            component in the namespace type name. For istance namespace type x.y.z will have two namespace scopes, the first is for the x and the second
            is for the y.
            </summary>
      <param name="methodBody" />
      <returns />
      <requires inheritedFrom="M:Microsoft.Cci.ILocalScopeProvider.GetNamespaceScopes(Microsoft.Cci.IMethodBody)" inheritedFromTypeName="ILocalScopeProvider" csharp="methodBody != null" vb="methodBody &lt;&gt; Nothing">methodBody != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.ILocalScopeProvider.GetNamespaceScopes(Microsoft.Cci.IMethodBody)" inheritedFromTypeName="ILocalScopeProvider" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.Decompiler.LocalScopeProvider.GetConstantsInScope(Microsoft.Cci.ILocalScope)">
      <summary>
            Returns zero or more local constant definitions that are local to the given scope.
            </summary>
      <param name="scope" />
      <returns />
      <requires inheritedFrom="M:Microsoft.Cci.ILocalScopeProvider.GetConstantsInScope(Microsoft.Cci.ILocalScope)" inheritedFromTypeName="ILocalScopeProvider" csharp="scope != null" vb="scope &lt;&gt; Nothing">scope != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.ILocalScopeProvider.GetConstantsInScope(Microsoft.Cci.ILocalScope)" inheritedFromTypeName="ILocalScopeProvider" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.Decompiler.LocalScopeProvider.GetVariablesInScope(Microsoft.Cci.ILocalScope)">
      <summary>
            Returns zero or more local variable definitions that are local to the given scope.
            </summary>
      <param name="scope" />
      <returns />
      <requires inheritedFrom="M:Microsoft.Cci.ILocalScopeProvider.GetVariablesInScope(Microsoft.Cci.ILocalScope)" inheritedFromTypeName="ILocalScopeProvider" csharp="scope != null" vb="scope &lt;&gt; Nothing">scope != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.ILocalScopeProvider.GetVariablesInScope(Microsoft.Cci.ILocalScope)" inheritedFromTypeName="ILocalScopeProvider" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.Decompiler.LocalScopeProvider.IsIterator(Microsoft.Cci.IMethodBody)">
      <summary>
            Returns true if the method body is an iterator.
            </summary>
      <param name="methodBody" />
      <returns />
      <requires inheritedFrom="M:Microsoft.Cci.ILocalScopeProvider.IsIterator(Microsoft.Cci.IMethodBody)" inheritedFromTypeName="ILocalScopeProvider" csharp="methodBody != null" vb="methodBody &lt;&gt; Nothing">methodBody != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.Decompiler.LocalScopeProvider.GetSynchronizationInformation(Microsoft.Cci.IMethodBody)">
      <summary>
            If the given method body is the "MoveNext" method of the state class of an asynchronous method, the returned
            object describes where synchronization points occur in the IL operations of the "MoveNext" method. Otherwise
            the result is null.
            </summary>
      <requires inheritedFrom="M:Microsoft.Cci.ILocalScopeProvider.GetSynchronizationInformation(Microsoft.Cci.IMethodBody)" inheritedFromTypeName="ILocalScopeProvider" csharp="methodBody != null" vb="methodBody &lt;&gt; Nothing">methodBody != null</requires>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.ReplaceMetadataMethodBodiesWithDecompiledMethodBodies">
      <summary>
            A mutator that copies metadata models into mutable code models by using the base MetadataMutator class to make a mutable copy
            of a given metadata model and also replaces any method bodies with instances of SourceMethodBody, which implements the ISourceMethodBody.Block property
            by decompiling the metadata model information provided by the properties of IMethodBody.
            </summary>
      <invariant>this.host != null</invariant>
    </member>
    <member name="F:Microsoft.Cci.ILToCodeModel.ReplaceMetadataMethodBodiesWithDecompiledMethodBodies.localScopeProvider">
      <summary>
            An object that can provide information about the local scopes of a method. May be null. 
            </summary>
    </member>
    <member name="F:Microsoft.Cci.ILToCodeModel.ReplaceMetadataMethodBodiesWithDecompiledMethodBodies.sourceLocationProvider">
      <summary>
            An object that can map offsets in an IL stream to source locations and block scopes. May be null.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.ILToCodeModel.ReplaceMetadataMethodBodiesWithDecompiledMethodBodies.host">
      <summary>
            An object representing the application that is hosting this mutator. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.ILToCodeModel.ReplaceMetadataMethodBodiesWithDecompiledMethodBodies.options">
      <summary>
            Decompiler options needed at the point that new source method bodies are created for each method definition.
            </summary>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ReplaceMetadataMethodBodiesWithDecompiledMethodBodies.#ctor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.ISourceLocationProvider,Microsoft.Cci.ILocalScopeProvider,Microsoft.Cci.ILToCodeModel.DecompilerOptions)">
      <summary>
            Allocates a mutator that copies metadata models into mutable code models by using the base MetadataMutator class to make a mutable copy
            of a given metadata model and also replaces any method bodies with instances of SourceMethodBody, which implements the ISourceMethodBody.Block property
            by decompiling the metadata model information provided by the properties of IMethodBody.
            </summary>
      <param name="host">An object representing the application that is hosting this mutator. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.</param>
      <param name="sourceLocationProvider">An object that can map some kinds of ILocation objects to IPrimarySourceLocation objects. May be null.</param>
      <param name="localScopeProvider">An object that can provide information about the local scopes of a method. May be null.</param>
      <param name="options">Set of options that control decompilation.</param>
      <requires csharp="host != null" vb="host &lt;&gt; Nothing">host != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ReplaceMetadataMethodBodiesWithDecompiledMethodBodies.TraverseChildren(Microsoft.Cci.IMethodDefinition)">
      <summary>
            Replaces the body of the given method with an equivalent instance of SourceMethod body, which in addition also implements ISourceMethodBody,
            which has the additional property, Block, which represents the corresponding Code Model for the method body.
            </summary>
      <requires inheritedFrom="M:Microsoft.Cci.MetadataTraverser.TraverseChildren(Microsoft.Cci.IMethodDefinition)" inheritedFromTypeName="MetadataTraverser" csharp="method != null" vb="method &lt;&gt; Nothing">method != null</requires>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.HelperTypeFinder">
      <summary>
            A traverser that visits every method body and collects together all of the private helper types of these bodies.
            </summary>
      <invariant>this.helperTypes != null</invariant>
      <invariant>this.helperMethods != null</invariant>
      <invariant>this.helperFields != null</invariant>
      <invariant>this.host != null</invariant>
    </member>
    <member name="F:Microsoft.Cci.ILToCodeModel.HelperTypeFinder.helperTypes">
      <summary>
            Contains an entry for every type that has been introduced by the compiler to hold the state of an anonymous delegate or of an iterator.
            Since decompilation re-introduces the anonymous delegates and iterators, these types should be removed from member lists.
            They stick around as PrivateHelperTypes of the methods containing the iterators and anonymous delegates.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.ILToCodeModel.HelperTypeFinder.helperMethods">
      <summary>
            Contains an entry for every method that has been introduced by the compiler in order to implement anonymous delegates.
            Since decompilation re-introduces the anonymous delegates and iterators, these members should be removed from member lists.
            They stick around as PrivateHelperMembers of the methods containing the anonymous delegates.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.ILToCodeModel.HelperTypeFinder.helperFields">
      <summary>
            Contains an entry for every field that has been introduced by the compiler in order to implement anonymous delegates.
            Since decompilation re-introduces the anonymous delegates and iterators, these members should be removed from member lists.
            They stick around as PrivateHelperMembers of the methods containing the anonymous delegates.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.ILToCodeModel.HelperTypeFinder.host">
      <summary>
            An object representing the application that is hosting this decompiler. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.ILToCodeModel.HelperTypeFinder.sourceLocationProvider">
      <summary>
            An object that can map some kinds of ILocation objects to IPrimarySourceLocation objects. May be null.
            </summary>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.HelperTypeFinder.#ctor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.ISourceLocationProvider)">
      <summary>
            A traverser that visits every method body and collects together all of the private helper types of these bodies.
            </summary>
      <param name="host">An object representing the application that is hosting this decompiler. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.</param>
      <param name="sourceLocationProvider">An object that can map some kinds of ILocation objects to IPrimarySourceLocation objects. May be null.</param>
      <requires csharp="host != null" vb="host &lt;&gt; Nothing">host != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.HelperTypeFinder.TraverseChildren(Microsoft.Cci.IModule)">
      <summary>
            Traverses only the namespace root of the given assembly, removing any type from the model that have the same
            interned key as one of the entries of this.typesToRemove.
            </summary>
      <requires inheritedFrom="M:Microsoft.Cci.MetadataTraverser.TraverseChildren(Microsoft.Cci.IModule)" inheritedFromTypeName="MetadataTraverser" csharp="module != null" vb="module &lt;&gt; Nothing">module != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.HelperTypeFinder.TraverseChildren(Microsoft.Cci.INamedTypeDefinition)">
      <summary>
            Traverses only the nested types and methods and collects together all of the private helper types that are introduced by the compiler
            when methods that contain closures or iterators are compiled.
            </summary>
      <requires inheritedFrom="M:Microsoft.Cci.MetadataTraverser.TraverseChildren(Microsoft.Cci.INamedTypeDefinition)" inheritedFromTypeName="MetadataTraverser" csharp="namedTypeDefinition != null" vb="namedTypeDefinition &lt;&gt; Nothing">namedTypeDefinition != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.HelperTypeFinder.TraverseChildren(Microsoft.Cci.IMethodDefinition)">
      <summary>
            Traverses only the (possibly missing) body of the method.
            </summary>
      <param name="method" />
      <requires inheritedFrom="M:Microsoft.Cci.MetadataTraverser.TraverseChildren(Microsoft.Cci.IMethodDefinition)" inheritedFromTypeName="MetadataTraverser" csharp="method != null" vb="method &lt;&gt; Nothing">method != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.HelperTypeFinder.TraverseChildren(Microsoft.Cci.IMethodBody)">
      <summary>
            Records all of the helper types of the method body into this.helperTypes.
            </summary>
      <param name="methodBody" />
      <requires inheritedFrom="M:Microsoft.Cci.MetadataTraverser.TraverseChildren(Microsoft.Cci.IMethodBody)" inheritedFromTypeName="MetadataTraverser" csharp="methodBody != null" vb="methodBody &lt;&gt; Nothing">methodBody != null</requires>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.RemoveUnnecessaryTypes">
      <summary>
            A traverser for a mutable code model that removes a specified set of types from the model.
            </summary>
      <invariant>this.helperFields != null</invariant>
      <invariant>this.helperMethods != null</invariant>
      <invariant>this.helperTypes != null</invariant>
    </member>
    <member name="F:Microsoft.Cci.ILToCodeModel.RemoveUnnecessaryTypes.helperTypes">
      <summary>
            Contains an entry for every type that has been introduced by the compiler to hold the state of an anonymous delegate or of an iterator.
            Since decompilation re-introduces the anonymous delegates and iterators, these types should be removed from member lists.
            They stick around as PrivateHelperTypes of the methods containing the iterators and anonymous delegates.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.ILToCodeModel.RemoveUnnecessaryTypes.helperMethods">
      <summary>
            Contains an entry for every method that has been introduced by the compiler in order to implement anonymous delegates.
            Since decompilation re-introduces the anonymous delegates and iterators, these members should be removed from member lists.
            They stick around as PrivateHelperMembers of the methods containing the anonymous delegates.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.ILToCodeModel.RemoveUnnecessaryTypes.helperFields">
      <summary>
            Contains an entry for every field that has been introduced by the compiler in order to implement anonymous delegates.
            Since decompilation re-introduces the anonymous delegates and iterators, these members should be removed from member lists.
            They stick around as PrivateHelperMembers of the methods containing the anonymous delegates.
            </summary>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.RemoveUnnecessaryTypes.#ctor(System.Collections.Generic.Dictionary{System.UInt32,Microsoft.Cci.ITypeDefinition},System.Collections.Generic.Dictionary{System.UInt32,Microsoft.Cci.IMethodDefinition},System.Collections.Generic.Dictionary{Microsoft.Cci.IFieldDefinition,Microsoft.Cci.IFieldDefinition})">
      <summary>
            Allocates a traverser for a mutable code model that removes a specified set of types from the model.
            </summary>
      <param name="helperTypes">A dictionary whose keys are the interned keys of the types to remove from member lists.</param>
      <param name="helperMethods">A dictionary whose keys are the interned keys of the methods to remove from member lists.</param>
      <param name="helperFields">A dictionary whose keys are the interned keys of the methods to remove from member lists.</param>
      <requires csharp="helperTypes != null" vb="helperTypes &lt;&gt; Nothing">helperTypes != null</requires>
      <requires csharp="helperMethods != null" vb="helperMethods &lt;&gt; Nothing">helperMethods != null</requires>
      <requires csharp="helperFields != null" vb="helperFields &lt;&gt; Nothing">helperFields != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.RemoveUnnecessaryTypes.TraverseChildren(Microsoft.Cci.IModule)">
      <summary>
            Traverses only the namespace root of the given assembly, removing any type from the model that have the same
            interned key as one of the entries of this.typesToRemove.
            </summary>
      <requires inheritedFrom="M:Microsoft.Cci.MetadataTraverser.TraverseChildren(Microsoft.Cci.IModule)" inheritedFromTypeName="MetadataTraverser" csharp="module != null" vb="module &lt;&gt; Nothing">module != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.RemoveUnnecessaryTypes.TraverseChildren(Microsoft.Cci.INamedTypeDefinition)">
      <summary>
            Traverses the specified type definition, removing any nested types that are compiler introduced private helper types
            for maintaining the state of closures and anonymous delegates.
            </summary>
      <requires inheritedFrom="M:Microsoft.Cci.MetadataTraverser.TraverseChildren(Microsoft.Cci.INamedTypeDefinition)" inheritedFromTypeName="MetadataTraverser" csharp="namedTypeDefinition != null" vb="namedTypeDefinition &lt;&gt; Nothing">namedTypeDefinition != null</requires>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.DecompiledBlock">
      <summary>
            A delimited collection of statements to execute in a new (nested) scope.
            </summary>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.DecompiledBlock.#ctor(System.UInt32,System.UInt32,Microsoft.Cci.UtilityDataStructures.Sublist{Microsoft.Cci.Analysis.BasicBlock{Microsoft.Cci.Analysis.Instruction}},System.Boolean)">
      <summary>
            A delimited collection of statements to execute in a new (nested) scope.
            </summary>
      <param name="startOffset">The IL offset of the first statement in the block.</param>
      <param name="endOffset">The IL offset of the first statement following the block.</param>
      <param name="containedBlocks">A list of basic blocks that are contained inside this source block.</param>
      <param name="isLexicalScope">If false, the block is a helper block for the decompilation process and it should be removed during final cleanup.</param>
      <requires csharp="endOffset &gt;= startOffset" vb="endOffset &gt;= startOffset">endOffset &gt;= startOffset</requires>
    </member>
    <member name="F:Microsoft.Cci.ILToCodeModel.DecompiledBlock.StartOffset">
      <summary>
            The IL offset of the first statement in the block.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.ILToCodeModel.DecompiledBlock.EndOffset">
      <summary>
            The IL offset of the first statement following the block. 
            </summary>
    </member>
    <member name="F:Microsoft.Cci.ILToCodeModel.DecompiledBlock.IsLexicalScope">
      <summary>
            If false, the block is a helper block for the decompilation process and it should be removed during final cleanup.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.ILToCodeModel.DecompiledBlock.ContainedBlocks">
      <summary>
            A list of basic blocks that are contained inside this source block.
            </summary>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ReplaceCompilerGeneratedLocalUsedForInitializersPattern(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <summary>
            The source expression "new C(){ f1 = e1, f2 = e2, ... }" (where the f's can be fields
            or properties) turns into "cgl = new C(); cgl.f1 = e1; cg1.f2 = e2; ...".
            ("cgl" means "compiler-generated local".)
            Turn it into a block expression whose Statements are the statements above (but where
            the first one becomes a local declaration statement), and with an Expression that is
            just the local, cgl', where cgl' is a freshly created local.
            </summary>
      <requires csharp="b != null" vb="b &lt;&gt; Nothing">b != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ReplacePlusAssignForStringPattern(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <summary>
            For a string field, s, the source expression e.s += ""
            turns into a specific pattern.
            That pattern here looks like:
            i:   push e
            i+1: push dup.s
            i+2: (!= dup (default_value string)) ? goto L2 : empty
            i+3: L1
            i+4: pop
            i+5: push ""
            i+6: L2
            i+7: pop.s = pop
            </summary>
      <requires csharp="b != null" vb="b &lt;&gt; Nothing">b != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PopCounter.TraverseChildren(Microsoft.Cci.IAnonymousDelegate)">
      <summary>
            Do not count pops in lambdas: they must not be confused with pops that
            are not within them.
            </summary>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IAnonymousDelegate)" inheritedFromTypeName="CodeTraverser" csharp="anonymousDelegate != null" vb="anonymousDelegate &lt;&gt; Nothing">anonymousDelegate != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PopReplacer.Rewrite(Microsoft.Cci.IAnonymousDelegate)">
      <summary>
            Do not replace pops in lambdas: they must not be confused with pops that
            are not within them.
            </summary>
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IAnonymousDelegate)" inheritedFromTypeName="CodeRewriter" csharp="anonymousDelegate != null" vb="anonymousDelegate &lt;&gt; Nothing">anonymousDelegate != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IAnonymousDelegate)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:Microsoft.Cci.ILToCodeModel.CompilationArtifactRemover.GetTypeFromHandle">
      <summary>
            A reference to System.Type.GetTypeFromHandle(System.Runtime.TypeHandle).
            </summary>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ResourceUseReplacer.CreateTypeReference(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IAssemblyReference,System.String)">
      <summary>
            Creates a type reference anchored in the given assembly reference and whose names are relative to the given host.
            When the type name has periods in it, a structured reference with nested namespaces is created.
            </summary>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ResourceUseReplacer.TraverseChildren(Microsoft.Cci.IBlockStatement)">
      <summary>
            Looking for the pattern:
            IDisposable&lt;T&gt; variable = e;
            try {
              using_body
            } finally {
              if (variable != null) {
                variable.Dispose();
              }
            }
            The type of the variable is *not* actually IDisposable, but some
            type that implements IDisposable.
            The assignment might be a local-declaration statement or else it
            might be an assignment statement.
            </summary>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBlockStatement)" inheritedFromTypeName="CodeTraverser" csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.SourceMethodBody">
      <summary>
            A metadata (IL) representation along with a source level representation of the body of a method or of a property/event accessor.
            </summary>
      <invariant>this.host != null</invariant>
      <invariant>this.ilMethodBody != null</invariant>
      <invariant>this.nameTable != null</invariant>
      <invariant>this.platformType != null</invariant>
      <invariant>this.cdfg != null</invariant>
      <invariant>this.localMap != null</invariant>
      <invariant>this.gotosThatTarget != null</invariant>
      <invariant>this.numberOfReferencesToLocal != null</invariant>
      <invariant>this.numberOfAssignmentsToLocal != null</invariant>
      <invariant>this.bindingsThatMakeALastUseOfALocalVersion != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SourceMethodBody.#ctor(Microsoft.Cci.IMethodBody,Microsoft.Cci.IMetadataHost,Microsoft.Cci.ISourceLocationProvider,Microsoft.Cci.ILocalScopeProvider,Microsoft.Cci.ILToCodeModel.DecompilerOptions)">
      <summary>
            Allocates a metadata (IL) representation along with a source level representation of the body of a method or of a property/event accessor.
            </summary>
      <param name="ilMethodBody">A method body whose IL operations should be decompiled into a block of statements that will be the
            result of the Block property of the resulting source method body.</param>
      <param name="host">An object representing the application that is hosting the converter. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.</param>
      <param name="sourceLocationProvider">An object that can map some kinds of ILocation objects to IPrimarySourceLocation objects. May be null.</param>
      <param name="localScopeProvider">An object that can provide information about the local scopes of a method.</param>
      <param name="options">Set of options that control decompilation.</param>
      <requires csharp="ilMethodBody != null" vb="ilMethodBody &lt;&gt; Nothing">ilMethodBody != null</requires>
      <requires csharp="host != null" vb="host &lt;&gt; Nothing">host != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SourceMethodBody.GetBlock">
      <summary>
            Decompile the IL operations of this method body into a block of statements.
            </summary>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.Unstacker">
      <invariant>this.locals != null</invariant>
      <invariant>this.createdLocals != null</invariant>
      <invariant>this.systemBool != null</invariant>
      <invariant>this.systemInt32 != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.Unstacker.#ctor(Microsoft.Cci.ILToCodeModel.SourceMethodBody)">
      <requires csharp="sourceMethodBody != null" vb="sourceMethodBody &lt;&gt; Nothing">sourceMethodBody != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.Unstacker.KeyForLocal(System.Int32,Microsoft.Cci.ITypeReference)">
      <requires csharp="0 &lt;= depth" vb="0 &lt;= depth">0 &lt;= depth</requires>
      <requires csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.Unstacker.NameForLocal(System.Int32,Microsoft.Cci.ITypeReference)">
      <requires csharp="0 &lt;= depth" vb="0 &lt;= depth">0 &lt;= depth</requires>
      <requires csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.Unstacker.CleanUpIdentifierName(System.String)">
      <requires csharp="s != null" vb="s &lt;&gt; Nothing">s != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.Unstacker.GetOrCreateLocal(System.Int32,Microsoft.Cci.ITypeReference)">
      <requires csharp="0 &lt;= depth" vb="0 &lt;= depth">0 &lt;= depth</requires>
      <requires csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.Unstacker.Rewrite(Microsoft.Cci.IPushStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IPushStatement)" inheritedFromTypeName="CodeRewriter" csharp="pushStatement != null" vb="pushStatement &lt;&gt; Nothing">pushStatement != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IPushStatement)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.Unstacker.Rewrite(Microsoft.Cci.IPopValue)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IPopValue)" inheritedFromTypeName="CodeRewriter" csharp="popValue != null" vb="popValue &lt;&gt; Nothing">popValue != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IPopValue)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.Unstacker.Rewrite(Microsoft.Cci.IDupValue)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IDupValue)" inheritedFromTypeName="CodeRewriter" csharp="dupValue != null" vb="dupValue &lt;&gt; Nothing">dupValue != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IDupValue)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.Unstacker.RewriteChildren(Microsoft.Cci.MutableCodeModel.ConditionalStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.ConditionalStatement)" inheritedFromTypeName="CodeRewriter" csharp="conditionalStatement != null" vb="conditionalStatement &lt;&gt; Nothing">conditionalStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.Unstacker.RewriteChildren(Microsoft.Cci.MutableCodeModel.ConstructorOrMethodCall)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.ConstructorOrMethodCall)" inheritedFromTypeName="CodeRewriter" csharp="constructorOrMethodCall != null" vb="constructorOrMethodCall &lt;&gt; Nothing">constructorOrMethodCall != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.Unstacker.RewriteChildren(Microsoft.Cci.MutableCodeModel.BinaryOperation)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.BinaryOperation)" inheritedFromTypeName="CodeRewriter" csharp="binaryOperation != null" vb="binaryOperation &lt;&gt; Nothing">binaryOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.LocalFinder.LocalOccursIn(Microsoft.Cci.IStatement,Microsoft.Cci.ILocalDefinition)">
      <requires csharp="s != null" vb="s &lt;&gt; Nothing">s != null</requires>
      <requires csharp="local != null" vb="local &lt;&gt; Nothing">local != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.LocalFinder.TraverseChildren(Microsoft.Cci.ILocalDefinition)">
      <requires inheritedFrom="M:Microsoft.Cci.MetadataTraverser.TraverseChildren(Microsoft.Cci.ILocalDefinition)" inheritedFromTypeName="MetadataTraverser" csharp="localDefinition != null" vb="localDefinition &lt;&gt; Nothing">localDefinition != null</requires>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.ForLoopReplacer">
      <invariant>this.host != null</invariant>
      <invariant>this.gotosThatTarget != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ForLoopReplacer.#ctor(Microsoft.Cci.ILToCodeModel.SourceMethodBody)">
      <requires csharp="sourceMethodBody != null" vb="sourceMethodBody &lt;&gt; Nothing">sourceMethodBody != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ForLoopReplacer.TraverseChildren(Microsoft.Cci.IBlockStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBlockStatement)" inheritedFromTypeName="CodeTraverser" csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.ClosureFinder">
      <invariant>this.host != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ClosureFinder.#ctor(Microsoft.Cci.IMetadataHost)">
      <requires csharp="host != null" vb="host &lt;&gt; Nothing">host != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ClosureFinder.TraverseChildren(Microsoft.Cci.ICreateDelegateInstance)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ICreateDelegateInstance)" inheritedFromTypeName="CodeTraverser" csharp="createDelegateInstance != null" vb="createDelegateInstance &lt;&gt; Nothing">createDelegateInstance != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ClosureFinder.TraverseChildren(Microsoft.Cci.ITokenOf)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ITokenOf)" inheritedFromTypeName="CodeTraverser" csharp="tokenOf != null" vb="tokenOf &lt;&gt; Nothing">tokenOf != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ClosureFinder.AddOuterClosures(Microsoft.Cci.ITypeDefinition)">
      <requires csharp="typeDefinition != null" vb="typeDefinition &lt;&gt; Nothing">typeDefinition != null</requires>
      <requires csharp="this.closures != null" vb="Me.closures &lt;&gt; Nothing">this.closures != null</requires>
      <ensures csharp="this.closures != null" vb="Me.closures &lt;&gt; Nothing">this.closures != null</ensures>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.SingleAssignmentSingleReferenceFinder">
      <invariant>this.bindingsThatMakeALastUseOfALocalVersion != null</invariant>
      <invariant>this.numberOfReferencesToLocal != null</invariant>
      <invariant>this.local != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SingleAssignmentSingleReferenceFinder.#ctor(Microsoft.Cci.UtilityDataStructures.SetOfObjects,Microsoft.Cci.UtilityDataStructures.HashtableForUintValues{System.Object})">
      <requires csharp="bindingsThatMakeALastUseOfALocalVersion != null" vb="bindingsThatMakeALastUseOfALocalVersion &lt;&gt; Nothing">bindingsThatMakeALastUseOfALocalVersion != null</requires>
      <requires csharp="numberOfReferencesToLocal != null" vb="numberOfReferencesToLocal &lt;&gt; Nothing">numberOfReferencesToLocal != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SingleAssignmentSingleReferenceFinder.LocalCanBeReplacedIn(Microsoft.Cci.IStatement,Microsoft.Cci.ILocalDefinition)">
      <requires csharp="statement != null" vb="statement &lt;&gt; Nothing">statement != null</requires>
      <requires csharp="local != null" vb="local &lt;&gt; Nothing">local != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SingleAssignmentSingleReferenceFinder.TraverseChildren(Microsoft.Cci.IAddressableExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IAddressableExpression)" inheritedFromTypeName="CodeTraverser" csharp="addressableExpression != null" vb="addressableExpression &lt;&gt; Nothing">addressableExpression != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SingleAssignmentSingleReferenceFinder.TraverseChildren(Microsoft.Cci.IBoundExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBoundExpression)" inheritedFromTypeName="CodeTraverser" csharp="boundExpression != null" vb="boundExpression &lt;&gt; Nothing">boundExpression != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SingleAssignmentSingleReferenceFinder.TraverseChildren(Microsoft.Cci.IMethodCall)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IMethodCall)" inheritedFromTypeName="CodeTraverser" csharp="methodCall != null" vb="methodCall &lt;&gt; Nothing">methodCall != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SingleAssignmentSingleReferenceFinder.TraverseChildren(Microsoft.Cci.ITargetExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ITargetExpression)" inheritedFromTypeName="CodeTraverser" csharp="targetExpression != null" vb="targetExpression &lt;&gt; Nothing">targetExpression != null</requires>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.SingleAssignmentLocalReplacer">
      <invariant>this.bindingsThatMakeALastUseOfALocalVersion != null</invariant>
      <invariant>this.numberOfAssignmentsToLocal != null</invariant>
      <invariant>this.local != null</invariant>
      <invariant>this.expressionToSubstituteForLocal != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SingleAssignmentLocalReplacer.#ctor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.UtilityDataStructures.SetOfObjects,Microsoft.Cci.UtilityDataStructures.HashtableForUintValues{System.Object})">
      <requires csharp="host != null" vb="host &lt;&gt; Nothing">host != null</requires>
      <requires csharp="bindingsThatMakeALastUseOfALocalVersion != null" vb="bindingsThatMakeALastUseOfALocalVersion &lt;&gt; Nothing">bindingsThatMakeALastUseOfALocalVersion != null</requires>
      <requires csharp="numberOfAssignmentsToLocal != null" vb="numberOfAssignmentsToLocal &lt;&gt; Nothing">numberOfAssignmentsToLocal != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SingleAssignmentLocalReplacer.Replace(Microsoft.Cci.IExpression,Microsoft.Cci.ILocalDefinition,Microsoft.Cci.IStatement)">
      <requires csharp="expressionToSubstituteForLocal != null" vb="expressionToSubstituteForLocal &lt;&gt; Nothing">expressionToSubstituteForLocal != null</requires>
      <requires csharp="local != null" vb="local &lt;&gt; Nothing">local != null</requires>
      <requires csharp="statement != null" vb="statement &lt;&gt; Nothing">statement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SingleAssignmentLocalReplacer.Rewrite(Microsoft.Cci.IBoundExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IBoundExpression)" inheritedFromTypeName="CodeRewriter" csharp="boundExpression != null" vb="boundExpression &lt;&gt; Nothing">boundExpression != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IBoundExpression)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SingleAssignmentLocalReplacer.RewriteChildren(Microsoft.Cci.MutableCodeModel.AddressableExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.AddressableExpression)" inheritedFromTypeName="CodeRewriter" csharp="addressableExpression != null" vb="addressableExpression &lt;&gt; Nothing">addressableExpression != null</requires>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.UnreferencedLabelRemover">
      <invariant>this.gotosThatTarget != null</invariant>
      <invariant>this.numberOfAssignmentsToLocal != null</invariant>
      <invariant>this.numberOfReferencesToLocal != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.UnreferencedLabelRemover.#ctor(Microsoft.Cci.ILToCodeModel.SourceMethodBody)">
      <requires csharp="sourceMethodBody != null" vb="sourceMethodBody &lt;&gt; Nothing">sourceMethodBody != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.UnreferencedLabelRemover.TraverseChildren(Microsoft.Cci.IBlockStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBlockStatement)" inheritedFromTypeName="CodeTraverser" csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.RemoveNonLexicalBlocks.TraverseChildren(Microsoft.Cci.IBlockStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBlockStatement)" inheritedFromTypeName="CodeTraverser" csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ClosureFieldMapper.#ctor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IMethodDefinition,Microsoft.Cci.UtilityDataStructures.Hashtable{System.Object},Microsoft.Cci.UtilityDataStructures.Hashtable{Microsoft.Cci.MutableCodeModel.Expression})">
      <requires csharp="host != null" vb="host &lt;&gt; Nothing">host != null</requires>
      <requires csharp="method != null" vb="method &lt;&gt; Nothing">method != null</requires>
      <requires csharp="closures != null" vb="closures &lt;&gt; Nothing">closures != null</requires>
      <requires csharp="closureFieldToLocalOrParameterMap != null" vb="closureFieldToLocalOrParameterMap &lt;&gt; Nothing">closureFieldToLocalOrParameterMap != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ClosureFieldMapper.TraverseChildren(Microsoft.Cci.IAssignment)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IAssignment)" inheritedFromTypeName="CodeTraverser" csharp="assignment != null" vb="assignment &lt;&gt; Nothing">assignment != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ClosureFieldMapper.TraverseChildren(Microsoft.Cci.IAddressableExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IAddressableExpression)" inheritedFromTypeName="CodeTraverser" csharp="addressableExpression != null" vb="addressableExpression &lt;&gt; Nothing">addressableExpression != null</requires>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.LockReplacer">
      <invariant>this.host != null</invariant>
      <invariant>this.numberOfReferencesToLocal != null</invariant>
      <invariant>this.numberOfAssignmentsToLocal != null</invariant>
      <invariant>this.bindingsThatMakeALastUseOfALocalVersion != null</invariant>
      <invariant>this.monitorEnter != null</invariant>
      <invariant>this.monitorExit != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.LockReplacer.#ctor(Microsoft.Cci.ILToCodeModel.SourceMethodBody)">
      <requires csharp="sourceMethodBody != null" vb="sourceMethodBody &lt;&gt; Nothing">sourceMethodBody != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.LockReplacer.TraverseChildren(Microsoft.Cci.IBlockStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBlockStatement)" inheritedFromTypeName="CodeTraverser" csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.LockReplacer.GetMonitor(Microsoft.Cci.IBlockStatement,Microsoft.Cci.ILocalDefinition,Microsoft.Cci.ILocalDefinition@)">
      <ensures csharp="result == default(Microsoft.Cci.IExpression) || monitorVar != null" vb="result = Nothing OrElse monitorVar &lt;&gt; Nothing">result == default(Microsoft.Cci.IExpression) || monitorVar != null</ensures>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.ForEachLoopReplacer">
      <invariant>this.host != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ForEachLoopReplacer.#ctor(Microsoft.Cci.ILToCodeModel.SourceMethodBody)">
      <requires csharp="sourceMethodBody != null" vb="sourceMethodBody &lt;&gt; Nothing">sourceMethodBody != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ForEachLoopReplacer.TraverseChildren(Microsoft.Cci.IBlockStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBlockStatement)" inheritedFromTypeName="CodeTraverser" csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.SwitchInstruction">
      <invariant>this.switchCases != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SwitchInstruction.#ctor(Microsoft.Cci.ILToCodeModel.SwitchInstruction)">
      <requires csharp="switchInstruction != null" vb="switchInstruction &lt;&gt; Nothing">switchInstruction != null</requires>
    </member>
    <member name="P:Microsoft.Cci.ILToCodeModel.SwitchInstruction.SwitchCases">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.MapGenericTypeParameters">
      <invariant>this.type != null</invariant>
      <invariant>this.genericArgumentsMap != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.MapGenericTypeParameters.#ctor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.ITypeDefinition)">
      <requires csharp="host != null" vb="host &lt;&gt; Nothing">host != null</requires>
      <requires csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.MapGenericTypeParameters.Rewrite(Microsoft.Cci.IBlockStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IBlockStatement)" inheritedFromTypeName="CodeRewriter" csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IBlockStatement)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.MapGenericTypeParameters.Rewrite(Microsoft.Cci.IGenericTypeParameterReference)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IGenericTypeParameterReference)" inheritedFromTypeName="MetadataRewriter" csharp="genericTypeParameterReference != null" vb="genericTypeParameterReference &lt;&gt; Nothing">genericTypeParameterReference != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IGenericTypeParameterReference)" inheritedFromTypeName="MetadataRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.MapGenericTypeParameters.Rewrite(Microsoft.Cci.ILocalDefinition)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.ILocalDefinition)" inheritedFromTypeName="MetadataRewriter" csharp="localDefinition != null" vb="localDefinition &lt;&gt; Nothing">localDefinition != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.ILocalDefinition)" inheritedFromTypeName="MetadataRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.SwitchReplacer">
      <invariant>this.host != null</invariant>
      <invariant>this.gotosThatTarget != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SwitchReplacer.#ctor(Microsoft.Cci.ILToCodeModel.SourceMethodBody)">
      <requires csharp="sourceMethodBody != null" vb="sourceMethodBody &lt;&gt; Nothing">sourceMethodBody != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SwitchReplacer.TraverseChildren(Microsoft.Cci.IBlockStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBlockStatement)" inheritedFromTypeName="CodeTraverser" csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.BlockFlattener.TraverseChildren(Microsoft.Cci.IBlockStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBlockStatement)" inheritedFromTypeName="CodeTraverser" csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.DecompiledBlock.ReplaceInitialLabel(Microsoft.Cci.MutableCodeModel.LabeledStatement)">
      <requires csharp="labeledStatement != null" vb="labeledStatement &lt;&gt; Nothing">labeledStatement != null</requires>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.InstructionParser">
      <invariant>this.sourceMethodBody != null</invariant>
      <invariant>this.host != null</invariant>
      <invariant>this.ilMethodBody != null</invariant>
      <invariant>this.MethodDefinition != null</invariant>
      <invariant>this.nameTable != null</invariant>
      <invariant>this.targetStatementFor != null</invariant>
      <invariant>this.platformType != null</invariant>
      <invariant>this.numberOfAssignmentsToLocal != null</invariant>
      <invariant>this.numberOfReferencesToLocal != null</invariant>
      <invariant>this.gotosThatTarget != null</invariant>
      <invariant>this.operandStack != null</invariant>
      <invariant>this.cdfg != null</invariant>
      <invariant>this.bindingsThatMakeALastUseOfALocalVersion != null</invariant>
      <invariant>this.instructionsThatMakeALastUseOfALocalVersion != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.#ctor(Microsoft.Cci.ILToCodeModel.SourceMethodBody)">
      <requires csharp="sourceMethodBody != null" vb="sourceMethodBody &lt;&gt; Nothing">sourceMethodBody != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.TraverseChildren(Microsoft.Cci.IBlockStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBlockStatement)" inheritedFromTypeName="CodeTraverser" csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseBasicBlock(System.Collections.Generic.List{Microsoft.Cci.IStatement},Microsoft.Cci.Analysis.BasicBlock{Microsoft.Cci.Analysis.Instruction})">
      <requires csharp="list != null" vb="list &lt;&gt; Nothing">list != null</requires>
      <requires csharp="bb != null" vb="bb &lt;&gt; Nothing">bb != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.FindLastUsesOfLocals(Microsoft.Cci.Analysis.BasicBlock{Microsoft.Cci.Analysis.Instruction})">
      <requires csharp="bb != null" vb="bb &lt;&gt; Nothing">bb != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.NextReferenceIsAssignment(Microsoft.Cci.ILocalDefinition,Microsoft.Cci.Analysis.BasicBlock{Microsoft.Cci.Analysis.Instruction},System.Int32,Microsoft.Cci.UtilityDataStructures.SetOfObjects)">
      <requires csharp="bb != null" vb="bb &lt;&gt; Nothing">bb != null</requires>
      <requires csharp="offset &gt;= 0" vb="offset &gt;= 0">offset &gt;= 0</requires>
      <requires csharp="blocksAlreadyVisited != null" vb="blocksAlreadyVisited &lt;&gt; Nothing">blocksAlreadyVisited != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseInstruction(Microsoft.Cci.Analysis.Instruction,System.Collections.Generic.List{Microsoft.Cci.IStatement})">
      <requires csharp="instruction != null" vb="instruction &lt;&gt; Nothing">instruction != null</requires>
      <requires csharp="statements != null" vb="statements &lt;&gt; Nothing">statements != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.TurnOperandStackIntoPushStatements(System.Collections.Generic.List{Microsoft.Cci.IStatement})">
      <requires csharp="statements != null" vb="statements &lt;&gt; Nothing">statements != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseAddressOf(Microsoft.Cci.Analysis.Instruction)">
      <requires csharp="instruction != null" vb="instruction &lt;&gt; Nothing">instruction != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseAddressDereference(Microsoft.Cci.IOperation)">
      <requires csharp="currentOperation != null" vb="currentOperation &lt;&gt; Nothing">currentOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseArrayCreate(Microsoft.Cci.IOperation)">
      <requires csharp="currentOperation != null" vb="currentOperation &lt;&gt; Nothing">currentOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseArrayElementAddres(Microsoft.Cci.IOperation,Microsoft.Cci.ITypeReference,System.Boolean)">
      <requires csharp="currentOperation != null" vb="currentOperation &lt;&gt; Nothing">currentOperation != null</requires>
      <requires csharp="elementType != null" vb="elementType &lt;&gt; Nothing">elementType != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseArrayIndexer(Microsoft.Cci.IOperation,Microsoft.Cci.ITypeReference,System.Boolean)">
      <requires csharp="currentOperation != null" vb="currentOperation &lt;&gt; Nothing">currentOperation != null</requires>
      <requires csharp="elementType != null" vb="elementType &lt;&gt; Nothing">elementType != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseArraySet(Microsoft.Cci.IOperation)">
      <requires csharp="currentOperation != null" vb="currentOperation &lt;&gt; Nothing">currentOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseAssignment(Microsoft.Cci.IOperation)">
      <requires csharp="currentOperation != null" vb="currentOperation &lt;&gt; Nothing">currentOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseBinaryOperation(Microsoft.Cci.MutableCodeModel.BinaryOperation)">
      <requires csharp="binaryOperation != null" vb="binaryOperation &lt;&gt; Nothing">binaryOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.HarmonizeOperands(Microsoft.Cci.MutableCodeModel.BinaryOperation)">
      <requires csharp="binaryOperation != null" vb="binaryOperation &lt;&gt; Nothing">binaryOperation != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseBinaryConditionalBranch(Microsoft.Cci.IOperation)">
      <requires csharp="currentOperation != null" vb="currentOperation &lt;&gt; Nothing">currentOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseBoundExpression(Microsoft.Cci.Analysis.Instruction)">
      <requires csharp="instruction != null" vb="instruction &lt;&gt; Nothing">instruction != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseCall(Microsoft.Cci.IOperation)">
      <requires csharp="currentOperation != null" vb="currentOperation &lt;&gt; Nothing">currentOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseCastIfPossible(Microsoft.Cci.IOperation)">
      <requires csharp="currentOperation != null" vb="currentOperation &lt;&gt; Nothing">currentOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseCompileTimeConstant(Microsoft.Cci.IOperation)">
      <requires csharp="currentOperation != null" vb="currentOperation &lt;&gt; Nothing">currentOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseConversion(Microsoft.Cci.IOperation)">
      <requires csharp="currentOperation != null" vb="currentOperation &lt;&gt; Nothing">currentOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ConvertBoxedValue(System.Object,Microsoft.Cci.ITypeReference)">
      <requires csharp="typeReference != null" vb="typeReference &lt;&gt; Nothing">typeReference != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseCreateObjectInstance(Microsoft.Cci.IOperation)">
      <requires csharp="currentOperation != null" vb="currentOperation &lt;&gt; Nothing">currentOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseDup(Microsoft.Cci.ITypeReference)">
      <requires csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseGetValueOfTypedReference(Microsoft.Cci.IOperation)">
      <requires csharp="currentOperation != null" vb="currentOperation &lt;&gt; Nothing">currentOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseInitObject(Microsoft.Cci.IOperation)">
      <requires csharp="currentOperation != null" vb="currentOperation &lt;&gt; Nothing">currentOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseMakeTypedReference(Microsoft.Cci.IOperation)">
      <requires csharp="currentOperation != null" vb="currentOperation &lt;&gt; Nothing">currentOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParsePointerCall(Microsoft.Cci.IOperation)">
      <requires csharp="currentOperation != null" vb="currentOperation &lt;&gt; Nothing">currentOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseSizeOf(Microsoft.Cci.IOperation)">
      <requires csharp="currentOperation != null" vb="currentOperation &lt;&gt; Nothing">currentOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseSwitchInstruction(Microsoft.Cci.IOperation)">
      <requires csharp="currentOperation != null" vb="currentOperation &lt;&gt; Nothing">currentOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseToken(Microsoft.Cci.IOperation)">
      <requires csharp="currentOperation != null" vb="currentOperation &lt;&gt; Nothing">currentOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseUnaryConditionalBranch(Microsoft.Cci.IOperation)">
      <requires csharp="currentOperation != null" vb="currentOperation &lt;&gt; Nothing">currentOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseUnconditionalBranch(Microsoft.Cci.IOperation)">
      <requires csharp="currentOperation != null" vb="currentOperation &lt;&gt; Nothing">currentOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseUnsignedBinaryOperation(Microsoft.Cci.MutableCodeModel.BinaryOperation)">
      <requires csharp="binaryOperation != null" vb="binaryOperation &lt;&gt; Nothing">binaryOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ParseUnaryOperation(Microsoft.Cci.MutableCodeModel.UnaryOperation)">
      <requires csharp="unaryOperation != null" vb="unaryOperation &lt;&gt; Nothing">unaryOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.PopOperandStack">
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.PopOperandStackAsUnsigned">
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.MakeGoto(Microsoft.Cci.IOperation)">
      <requires csharp="currentOperation != null" vb="currentOperation &lt;&gt; Nothing">currentOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.GetLocalWithSourceName(Microsoft.Cci.ILocalDefinition)">
      <requires csharp="localDef != null" vb="localDef &lt;&gt; Nothing">localDef != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ConvertToInt(Microsoft.Cci.MutableCodeModel.Expression)">
      <requires csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ConvertToUnsigned(Microsoft.Cci.MutableCodeModel.Expression)">
      <requires csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.InstructionParser.ConvertToUnsigned2(Microsoft.Cci.MutableCodeModel.Expression)">
      <requires csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.ClosureFieldDeclaringBlockFinder">
      <invariant>this.closureFieldToLocalOrParameterMap != null</invariant>
      <invariant>this.declaringBlockMap != null</invariant>
      <invariant>this.containingBlockMap != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ClosureFieldDeclaringBlockFinder.#ctor(Microsoft.Cci.UtilityDataStructures.Hashtable{Microsoft.Cci.MutableCodeModel.Expression})">
      <requires csharp="closureFieldToLocalOrParameterMap != null" vb="closureFieldToLocalOrParameterMap &lt;&gt; Nothing">closureFieldToLocalOrParameterMap != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ClosureFieldDeclaringBlockFinder.TraverseChildren(Microsoft.Cci.IBlockStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBlockStatement)" inheritedFromTypeName="CodeTraverser" csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ClosureFieldDeclaringBlockFinder.TraverseChildren(Microsoft.Cci.IAddressableExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IAddressableExpression)" inheritedFromTypeName="CodeTraverser" csharp="addressableExpression != null" vb="addressableExpression &lt;&gt; Nothing">addressableExpression != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ClosureFieldDeclaringBlockFinder.TraverseChildren(Microsoft.Cci.IBoundExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBoundExpression)" inheritedFromTypeName="CodeTraverser" csharp="boundExpression != null" vb="boundExpression &lt;&gt; Nothing">boundExpression != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ClosureFieldDeclaringBlockFinder.TraverseChildren(Microsoft.Cci.ITargetExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ITargetExpression)" inheritedFromTypeName="CodeTraverser" csharp="targetExpression != null" vb="targetExpression &lt;&gt; Nothing">targetExpression != null</requires>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.ResourceUseReplacer">
      <invariant>this.host != null</invariant>
      <invariant>this.IDisposable != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ResourceUseReplacer.#ctor(Microsoft.Cci.ILToCodeModel.SourceMethodBody)">
      <requires csharp="sourceMethodBody != null" vb="sourceMethodBody &lt;&gt; Nothing">sourceMethodBody != null</requires>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.WhileLoopReplacer">
      <invariant>this.host != null</invariant>
      <invariant>this.gotosThatTarget != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.WhileLoopReplacer.#ctor(Microsoft.Cci.ILToCodeModel.SourceMethodBody)">
      <requires csharp="sourceMethodBody != null" vb="sourceMethodBody &lt;&gt; Nothing">sourceMethodBody != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.WhileLoopReplacer.TraverseChildren(Microsoft.Cci.IBlockStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBlockStatement)" inheritedFromTypeName="CodeTraverser" csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.WhileLoopReplacer.LookForCondition(System.Collections.Generic.List{Microsoft.Cci.IStatement},System.Int32,Microsoft.Cci.ILabeledStatement)">
      <requires csharp="statements != null" vb="statements &lt;&gt; Nothing">statements != null</requires>
      <requires csharp="i &gt;= 0" vb="i &gt;= 0">i &gt;= 0</requires>
      <requires csharp="potentialLabel != null" vb="potentialLabel &lt;&gt; Nothing">potentialLabel != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.WhileLoopReplacer.ExtractBlock(System.Collections.Generic.List{Microsoft.Cci.IStatement},System.Int32,Microsoft.Cci.ILabeledStatement)">
      <requires csharp="statements != null" vb="statements &lt;&gt; Nothing">statements != null</requires>
      <requires csharp="first &gt; 0" vb="first &gt; 0">first &gt; 0</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.LocalReadAndWriteCounter">
      <invariant>this.numberOfAssignmentsToLocal != null</invariant>
      <invariant>this.numberOfReferencesToLocal != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.LocalReadAndWriteCounter.#ctor(Microsoft.Cci.UtilityDataStructures.HashtableForUintValues{System.Object},Microsoft.Cci.UtilityDataStructures.HashtableForUintValues{System.Object})">
      <requires csharp="numberOfAssignmentsToLocal != null" vb="numberOfAssignmentsToLocal &lt;&gt; Nothing">numberOfAssignmentsToLocal != null</requires>
      <requires csharp="numberOfReferencesToLocal != null" vb="numberOfReferencesToLocal &lt;&gt; Nothing">numberOfReferencesToLocal != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.LocalReadAndWriteCounter.TraverseChildren(Microsoft.Cci.IAddressableExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IAddressableExpression)" inheritedFromTypeName="CodeTraverser" csharp="addressableExpression != null" vb="addressableExpression &lt;&gt; Nothing">addressableExpression != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.LocalReadAndWriteCounter.TraverseChildren(Microsoft.Cci.ILocalDeclarationStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ILocalDeclarationStatement)" inheritedFromTypeName="CodeTraverser" csharp="localDeclarationStatement != null" vb="localDeclarationStatement &lt;&gt; Nothing">localDeclarationStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.LocalReadAndWriteCounter.TraverseChildren(Microsoft.Cci.IBoundExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBoundExpression)" inheritedFromTypeName="CodeTraverser" csharp="boundExpression != null" vb="boundExpression &lt;&gt; Nothing">boundExpression != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.LocalReadAndWriteCounter.TraverseChildren(Microsoft.Cci.ITargetExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ITargetExpression)" inheritedFromTypeName="CodeTraverser" csharp="targetExpression != null" vb="targetExpression &lt;&gt; Nothing">targetExpression != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.EndFinally.#ctor(Microsoft.Cci.ILToCodeModel.EndFinally)">
      <requires csharp="endFinally != null" vb="endFinally &lt;&gt; Nothing">endFinally != null</requires>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.CapturedLocalDeclarationInserter">
      <invariant>this.declaringBlockMap != null</invariant>
      <invariant>this.closureFieldToLocalOrParameterMap != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.CapturedLocalDeclarationInserter.#ctor(Microsoft.Cci.UtilityDataStructures.Hashtable{Microsoft.Cci.MutableCodeModel.Expression},Microsoft.Cci.UtilityDataStructures.Hashtable{Microsoft.Cci.MutableCodeModel.BlockStatement})">
      <requires csharp="declaringBlockMap != null" vb="declaringBlockMap &lt;&gt; Nothing">declaringBlockMap != null</requires>
      <requires csharp="closureFieldToLocalOrParameterMap != null" vb="closureFieldToLocalOrParameterMap &lt;&gt; Nothing">closureFieldToLocalOrParameterMap != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.CapturedLocalDeclarationInserter.TraverseChildren(Microsoft.Cci.IBlockStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBlockStatement)" inheritedFromTypeName="CodeTraverser" csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.PopReplacer">
      <invariant>this.statements != null</invariant>
      <invariant>this.i &gt;= 0</invariant>
      <invariant>this.i &lt; this.statements.Count</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PopReplacer.#ctor(Microsoft.Cci.IMetadataHost,System.Collections.Generic.List{Microsoft.Cci.IStatement},System.Int32,System.Int32)">
      <requires csharp="host != null" vb="host &lt;&gt; Nothing">host != null</requires>
      <requires csharp="statements != null" vb="statements &lt;&gt; Nothing">statements != null</requires>
      <requires csharp="i &gt;= 0" vb="i &gt;= 0">i &gt;= 0</requires>
      <requires csharp="i &lt; statements.Count" vb="i &lt; statements.Count">i &lt; statements.Count</requires>
      <requires csharp="numberOfPopsToIgnore &gt;= 0" vb="numberOfPopsToIgnore &gt;= 0">numberOfPopsToIgnore &gt;= 0</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PopReplacer.Rewrite(Microsoft.Cci.IExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IExpression)" inheritedFromTypeName="CodeRewriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IExpression)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.AnonymousDelegateCachingRemover.#ctor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.UtilityDataStructures.Hashtable{Microsoft.Cci.IAnonymousDelegate},Microsoft.Cci.UtilityDataStructures.Hashtable{Microsoft.Cci.MutableCodeModel.LocalDefinition,Microsoft.Cci.MutableCodeModel.AnonymousDelegate})">
      <requires csharp="host != null" vb="host &lt;&gt; Nothing">host != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.AnonymousDelegateCachingRemover.Rewrite(Microsoft.Cci.IAnonymousDelegate)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IAnonymousDelegate)" inheritedFromTypeName="CodeRewriter" csharp="anonymousDelegate != null" vb="anonymousDelegate &lt;&gt; Nothing">anonymousDelegate != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IAnonymousDelegate)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.AnonymousDelegateCachingRemover.Rewrite(Microsoft.Cci.IBoundExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IBoundExpression)" inheritedFromTypeName="CodeRewriter" csharp="boundExpression != null" vb="boundExpression &lt;&gt; Nothing">boundExpression != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IBoundExpression)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.AnonymousDelegateCachingRemover.Rewrite(Microsoft.Cci.IConditionalStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IConditionalStatement)" inheritedFromTypeName="CodeRewriter" csharp="conditionalStatement != null" vb="conditionalStatement &lt;&gt; Nothing">conditionalStatement != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IConditionalStatement)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.AnonymousDelegateCachingRemover.Rewrite(Microsoft.Cci.IExpressionStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IExpressionStatement)" inheritedFromTypeName="CodeRewriter" csharp="expressionStatement != null" vb="expressionStatement &lt;&gt; Nothing">expressionStatement != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IExpressionStatement)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.AnonymousDelegateCachingRemover.Rewrite(Microsoft.Cci.ILocalDeclarationStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.ILocalDeclarationStatement)" inheritedFromTypeName="CodeRewriter" csharp="localDeclarationStatement != null" vb="localDeclarationStatement &lt;&gt; Nothing">localDeclarationStatement != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.ILocalDeclarationStatement)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.IfThenElseReplacer">
      <invariant>this.host != null</invariant>
      <invariant>this.gotosThatTarget != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.IfThenElseReplacer.#ctor(Microsoft.Cci.ILToCodeModel.SourceMethodBody)">
      <requires csharp="sourceMethodBody != null" vb="sourceMethodBody &lt;&gt; Nothing">sourceMethodBody != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.IfThenElseReplacer.TraverseChildren(Microsoft.Cci.IBlockStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBlockStatement)" inheritedFromTypeName="CodeTraverser" csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.IfThenElseReplacer.ReturnLastGoto(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.IfThenElseReplacer.RemoveLastGoto(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.IfThenElseReplacer.InvertCondition(Microsoft.Cci.IExpression)">
      <requires csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.IfThenElseReplacer.InvertCompileTimeConstant(Microsoft.Cci.MutableCodeModel.CompileTimeConstant)">
      <requires csharp="compileTimeConst != null" vb="compileTimeConst &lt;&gt; Nothing">compileTimeConst != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.IfThenElseReplacer.InvertConditional(Microsoft.Cci.MutableCodeModel.Conditional)">
      <requires csharp="conditional != null" vb="conditional &lt;&gt; Nothing">conditional != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.IfThenElseReplacer.InvertBinaryOperation(Microsoft.Cci.IBinaryOperation)">
      <requires csharp="binOp != null" vb="binOp &lt;&gt; Nothing">binOp != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.IfThenElseReplacer.KeepUnsignedButInvertUnordered(System.Boolean,Microsoft.Cci.IBinaryOperation)">
      <requires csharp="binOp != null" vb="binOp &lt;&gt; Nothing">binOp != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.IfThenElseReplacer.ExtractBlock(System.Collections.Generic.List{Microsoft.Cci.IStatement},System.Int32,Microsoft.Cci.ILabeledStatement,System.Boolean)">
      <requires csharp="statements != null" vb="statements &lt;&gt; Nothing">statements != null</requires>
      <requires csharp="first &gt; 0" vb="first &gt; 0">first &gt; 0</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.EndFilter.#ctor(Microsoft.Cci.ILToCodeModel.EndFilter)">
      <requires csharp="endFilter != null" vb="endFilter &lt;&gt; Nothing">endFilter != null</requires>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.TryCatchReplacer">
      <invariant>this.host != null</invariant>
      <invariant>this.tryCatchFinallyMap != null</invariant>
      <invariant>this.handlerMap != null</invariant>
      <invariant>this.gotosThatTarget != null</invariant>
      <invariant>this.trystartOutsideLabels != null</invariant>
      <invariant>this.insideLabelFor != null</invariant>
      <invariant>this.localDeclarationRemover != null</invariant>
      <invariant>this.unconditionalBranchRemover != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TryCatchReplacer.#ctor(Microsoft.Cci.ILToCodeModel.SourceMethodBody,Microsoft.Cci.ILToCodeModel.DecompiledBlock)">
      <requires csharp="sourceMethodBody != null" vb="sourceMethodBody &lt;&gt; Nothing">sourceMethodBody != null</requires>
      <requires csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TryCatchReplacer.TraverseChildren(Microsoft.Cci.IBlockStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBlockStatement)" inheritedFromTypeName="CodeTraverser" csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TryCatchReplacer.TraverseChildren(Microsoft.Cci.IGotoStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IGotoStatement)" inheritedFromTypeName="CodeTraverser" csharp="gotoStatement != null" vb="gotoStatement &lt;&gt; Nothing">gotoStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TryCatchReplacer.ConsolidateScopes(Microsoft.Cci.MutableCodeModel.TryCatchFinallyStatement)">
      <requires csharp="trycf != null" vb="trycf &lt;&gt; Nothing">trycf != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TryCatchReplacer.ConsolidateScopes(Microsoft.Cci.ILToCodeModel.DecompiledBlock)">
      <requires csharp="cb != null" vb="cb &lt;&gt; Nothing">cb != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TryCatchReplacer.RemoveEndFinallyFrom(Microsoft.Cci.ILToCodeModel.DecompiledBlock)">
      <requires csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TryCatchReplacer.RemoveEndFinallyFrom(Microsoft.Cci.ILToCodeModel.DecompiledBlock,Microsoft.Cci.MutableCodeModel.LabeledStatement)">
      <requires csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
      <requires csharp="labelToGoto != null" vb="labelToGoto &lt;&gt; Nothing">labelToGoto != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TryCatchReplacer.RemoveUnconditionalBranchesToLabelImmediatelyFollowing(Microsoft.Cci.MutableCodeModel.TryCatchFinallyStatement,Microsoft.Cci.ILToCodeModel.DecompiledBlock)">
      <requires csharp="trycf != null" vb="trycf &lt;&gt; Nothing">trycf != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TryCatchReplacer.RemoveLocalDeclarationOf(Microsoft.Cci.ILocalDefinition,Microsoft.Cci.ILToCodeModel.DecompiledBlock)">
      <requires csharp="exceptionContainer != null" vb="exceptionContainer &lt;&gt; Nothing">exceptionContainer != null</requires>
      <requires csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TryCatchReplacer.ExtractExceptionContainer(Microsoft.Cci.ILToCodeModel.DecompiledBlock,Microsoft.Cci.ITypeReference)">
      <requires csharp="nestedBlock != null" vb="nestedBlock &lt;&gt; Nothing">nestedBlock != null</requires>
      <requires csharp="exceptionType != null" vb="exceptionType &lt;&gt; Nothing">exceptionType != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TryCatchReplacer.GetFilterCondition(Microsoft.Cci.ILToCodeModel.DecompiledBlock)">
      <requires csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TryCatchReplacer.RemovedFilterCondition(Microsoft.Cci.ILToCodeModel.DecompiledBlock)">
      <requires csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TryCatchReplacer.CopyStatements(System.Collections.Generic.List{Microsoft.Cci.IStatement},System.Int32)">
      <requires csharp="statements != null" vb="statements &lt;&gt; Nothing">statements != null</requires>
      <requires csharp="0 &lt;= n &amp;&amp; n &lt; statements.Count" vb="0 &lt;= n AndAlso n &lt; statements.Count">0 &lt;= n &amp;&amp; n &lt; statements.Count</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TryCatchReplacer.UnconditionalBranchRemover.TraverseChildren(Microsoft.Cci.IBlockStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBlockStatement)" inheritedFromTypeName="CodeTraverser" csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TryCatchReplacer.LocalDeclarationRemover.TraverseChildren(Microsoft.Cci.IBlockStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBlockStatement)" inheritedFromTypeName="CodeTraverser" csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.PatternReplacer">
      <invariant>this.host != null</invariant>
      <invariant>this.nameTable != null</invariant>
      <invariant>this.gotosThatTarget != null</invariant>
      <invariant>this.numberOfAssignmentsToLocal != null</invariant>
      <invariant>this.numberOfReferencesToLocal != null</invariant>
      <invariant>this.bindingsThatMakeALastUseOfALocalVersion != null</invariant>
      <invariant>this.singleAssignmentReferenceFinder != null</invariant>
      <invariant>this.singleAssignmentLocalReplacer != null</invariant>
      <invariant>this.singleUseExpressionChecker != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.#ctor(Microsoft.Cci.ILToCodeModel.SourceMethodBody,Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="sourceMethodBody != null" vb="sourceMethodBody &lt;&gt; Nothing">sourceMethodBody != null</requires>
      <requires csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.TraverseChildren(Microsoft.Cci.IBlockStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBlockStatement)" inheritedFromTypeName="CodeTraverser" csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ReplaceArrayInitializerPattern(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="b != null" vb="b &lt;&gt; Nothing">b != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.AddSizesAndArrayInitializers(Microsoft.Cci.MutableCodeModel.CreateArray,Microsoft.Cci.IFieldDefinition)">
      <requires csharp="createArray != null" vb="createArray &lt;&gt; Nothing">createArray != null</requires>
      <requires csharp="initialValueField != null" vb="initialValueField &lt;&gt; Nothing">initialValueField != null</requires>
      <requires csharp="initialValueField.IsMapped" vb="initialValueField.IsMapped">initialValueField.IsMapped</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ConvertToUlong(Microsoft.Cci.IMetadataConstant)">
      <requires csharp="c != null" vb="c &lt;&gt; Nothing">c != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ReadValue(Microsoft.Cci.PrimitiveTypeCode,System.IO.BinaryReader)">
      <requires csharp="reader != null" vb="reader &lt;&gt; Nothing">reader != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ReplaceArrayInitializerPattern2(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="b != null" vb="b &lt;&gt; Nothing">b != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ComputeFlatIndex(Microsoft.Cci.MutableCodeModel.ArrayIndexer,Microsoft.Cci.MutableCodeModel.CreateArray)">
      <requires csharp="arrayIndexer != null" vb="arrayIndexer &lt;&gt; Nothing">arrayIndexer != null</requires>
      <requires csharp="createArray != null" vb="createArray &lt;&gt; Nothing">createArray != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ReplaceConditionalExpressionPattern(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="b != null" vb="b &lt;&gt; Nothing">b != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ReplaceDupPopPattern(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="b != null" vb="b &lt;&gt; Nothing">b != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ReplacePostBinopPattern(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="b != null" vb="b &lt;&gt; Nothing">b != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ReplacePropertyBinopPattern(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="b != null" vb="b &lt;&gt; Nothing">b != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ReplacedCompoundAssignmentViaTempPattern(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="b != null" vb="b &lt;&gt; Nothing">b != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ReplacePushPushDupPopPopPattern(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="b != null" vb="b &lt;&gt; Nothing">b != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.CollapseOpAssign(Microsoft.Cci.MutableCodeModel.Assignment)">
      <requires csharp="assignment != null" vb="assignment &lt;&gt; Nothing">assignment != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ReplacePushDupPopPattern(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="b != null" vb="b &lt;&gt; Nothing">b != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ReplacePushDupPushPopPattern(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="b != null" vb="b &lt;&gt; Nothing">b != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ReplacePushPopPattern(Microsoft.Cci.MutableCodeModel.BlockStatement,Microsoft.Cci.IMetadataHost)">
      <requires csharp="b != null" vb="b &lt;&gt; Nothing">b != null</requires>
      <requires csharp="host != null" vb="host &lt;&gt; Nothing">host != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ReplaceShortCircuitAnd(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="b != null" vb="b &lt;&gt; Nothing">b != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ReplaceShortCircuitAnd2(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="b != null" vb="b &lt;&gt; Nothing">b != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ReplaceShortCircuitAnd3(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="b != null" vb="b &lt;&gt; Nothing">b != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ReplaceShortCircuitAnd4(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="b != null" vb="b &lt;&gt; Nothing">b != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ReplaceShortCircuitAnd5(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="b != null" vb="b &lt;&gt; Nothing">b != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ReplaceShortCircuitAnd6(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="b != null" vb="b &lt;&gt; Nothing">b != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ReplaceReturnViaGoto(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="b != null" vb="b &lt;&gt; Nothing">b != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ReplaceReturnViaGotoInVoidMethods(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="b != null" vb="b &lt;&gt; Nothing">b != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ReplaceSelfAssignment(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="b != null" vb="b &lt;&gt; Nothing">b != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.ReplaceSingleUseCompilerGeneratedLocalPattern(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="b != null" vb="b &lt;&gt; Nothing">b != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.IsSetter(Microsoft.Cci.IMethodReference)">
      <requires csharp="methodReference != null" vb="methodReference &lt;&gt; Nothing">methodReference != null</requires>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.PatternReplacer.SinglePopReplacer">
      <invariant>this.previouslyPushedExpression != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.SinglePopReplacer.#ctor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.MutableCodeModel.Expression)">
      <requires csharp="previouslyPushedExpression != null" vb="previouslyPushedExpression &lt;&gt; Nothing">previouslyPushedExpression != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PatternReplacer.SinglePopReplacer.Rewrite(Microsoft.Cci.IPopValue)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IPopValue)" inheritedFromTypeName="CodeRewriter" csharp="popValue != null" vb="popValue &lt;&gt; Nothing">popValue != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IPopValue)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SourceMethodBody.CreateExceptionBlocks(Microsoft.Cci.ILToCodeModel.DecompiledBlock)">
      <requires csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SourceMethodBody.CompareHandlers(Microsoft.Cci.IOperationExceptionInformation,Microsoft.Cci.IOperationExceptionInformation)">
      <requires csharp="handler1 != null" vb="handler1 &lt;&gt; Nothing">handler1 != null</requires>
      <requires csharp="handler2 != null" vb="handler2 &lt;&gt; Nothing">handler2 != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SourceMethodBody.CreateNestedBlock(Microsoft.Cci.ILToCodeModel.DecompiledBlock,System.UInt32,System.UInt32)">
      <requires csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
      <requires csharp="startOffset &lt;= endOffset" vb="startOffset &lt;= endOffset">startOffset &lt;= endOffset</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SourceMethodBody.SplitBlock(Microsoft.Cci.ILToCodeModel.DecompiledBlock,System.UInt32,System.Collections.Generic.List{Microsoft.Cci.IStatement},System.Collections.Generic.List{Microsoft.Cci.IStatement})">
      <requires csharp="blockToSplit != null" vb="blockToSplit &lt;&gt; Nothing">blockToSplit != null</requires>
      <requires csharp="leftList != null" vb="leftList &lt;&gt; Nothing">leftList != null</requires>
      <requires csharp="rightList != null" vb="rightList &lt;&gt; Nothing">rightList != null</requires>
      <requires csharp="splitOffset &gt;= blockToSplit.StartOffset" vb="splitOffset &gt;= blockToSplit.StartOffset">splitOffset &gt;= blockToSplit.StartOffset</requires>
      <requires csharp="splitOffset &lt;= blockToSplit.EndOffset" vb="splitOffset &lt;= blockToSplit.EndOffset">splitOffset &lt;= blockToSplit.EndOffset</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SourceMethodBody.CreateLexicalScopes(Microsoft.Cci.ILToCodeModel.DecompiledBlock,Microsoft.Cci.UtilityDataStructures.Sublist{Microsoft.Cci.ILocalScope})">
      <requires csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
      <requires csharp="this.localScopeProvider != null" vb="Me.localScopeProvider &lt;&gt; Nothing">this.localScopeProvider != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SourceMethodBody.AddLocalsAndConstants(Microsoft.Cci.ILToCodeModel.DecompiledBlock,Microsoft.Cci.ILocalScope)">
      <requires csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
      <requires csharp="scope != null" vb="scope &lt;&gt; Nothing">scope != null</requires>
      <requires csharp="this.localScopeProvider != null" vb="Me.localScopeProvider &lt;&gt; Nothing">this.localScopeProvider != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SourceMethodBody.GetLocalWithSourceName(Microsoft.Cci.ILocalDefinition)">
      <requires csharp="localDef != null" vb="localDef &lt;&gt; Nothing">localDef != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SourceMethodBody.RemoveRedundantFinalReturn(Microsoft.Cci.ILToCodeModel.DecompiledBlock)">
      <requires csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SourceMethodBody.DeleteNops(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SourceMethodBody.DeleteLocalAssignedLocal(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SourceMethodBody.IsAssignmentOfLocalToLocal(Microsoft.Cci.IStatement,Microsoft.Cci.ILocalDefinition@)">
      <ensures csharp="result ⇒ local != null" vb="result Implies local &lt;&gt; Nothing">!result || local != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SourceMethodBody.Microsoft#Cci#IMethodBody#get_OperationExceptionInformation">
      <ensures inheritedFrom="M:Microsoft.Cci.IMethodBody.get_OperationExceptionInformation" inheritedFromTypeName="IMethodBody" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:Microsoft.Cci.IMethodBody.get_OperationExceptionInformation" inheritedFromTypeName="IMethodBody" csharp="for all x in result x != null" vb="for all x in result x &lt;&gt; Nothing">for all x in result x != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SourceMethodBody.Microsoft#Cci#IMethodBody#get_LocalVariables">
      <ensures inheritedFrom="M:Microsoft.Cci.IMethodBody.get_LocalVariables" inheritedFromTypeName="IMethodBody" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:Microsoft.Cci.IMethodBody.get_LocalVariables" inheritedFromTypeName="IMethodBody" csharp="for all x in result x != null" vb="for all x in result x &lt;&gt; Nothing">for all x in result x != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SourceMethodBody.Microsoft#Cci#IMethodBody#get_MethodDefinition">
      <ensures inheritedFrom="M:Microsoft.Cci.IMethodBody.get_MethodDefinition" inheritedFromTypeName="IMethodBody" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SourceMethodBody.Microsoft#Cci#IMethodBody#get_Operations">
      <ensures inheritedFrom="M:Microsoft.Cci.IMethodBody.get_Operations" inheritedFromTypeName="IMethodBody" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:Microsoft.Cci.IMethodBody.get_Operations" inheritedFromTypeName="IMethodBody" csharp="for all x in result x != null" vb="for all x in result x &lt;&gt; Nothing">for all x in result x != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SourceMethodBody.Microsoft#Cci#IMethodBody#get_PrivateHelperTypes">
      <ensures inheritedFrom="M:Microsoft.Cci.IMethodBody.get_PrivateHelperTypes" inheritedFromTypeName="IMethodBody" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:Microsoft.Cci.IMethodBody.get_PrivateHelperTypes" inheritedFromTypeName="IMethodBody" csharp="for all x in result x != null" vb="for all x in result x &lt;&gt; Nothing">for all x in result x != null</ensures>
    </member>
    <member name="P:Microsoft.Cci.ILToCodeModel.SourceMethodBody.Microsoft#Cci#IMethodBody#OperationExceptionInformation">
      <getter>
        <ensures inheritedFrom="M:Microsoft.Cci.IMethodBody.get_OperationExceptionInformation" inheritedFromTypeName="IMethodBody" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
        <ensures inheritedFrom="M:Microsoft.Cci.IMethodBody.get_OperationExceptionInformation" inheritedFromTypeName="IMethodBody" csharp="for all x in result x != null" vb="for all x in result x &lt;&gt; Nothing">for all x in result x != null</ensures>
      </getter>
    </member>
    <member name="P:Microsoft.Cci.ILToCodeModel.SourceMethodBody.Microsoft#Cci#IMethodBody#LocalVariables">
      <getter>
        <ensures inheritedFrom="M:Microsoft.Cci.IMethodBody.get_LocalVariables" inheritedFromTypeName="IMethodBody" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
        <ensures inheritedFrom="M:Microsoft.Cci.IMethodBody.get_LocalVariables" inheritedFromTypeName="IMethodBody" csharp="for all x in result x != null" vb="for all x in result x &lt;&gt; Nothing">for all x in result x != null</ensures>
      </getter>
    </member>
    <member name="P:Microsoft.Cci.ILToCodeModel.SourceMethodBody.Microsoft#Cci#IMethodBody#MethodDefinition">
      <getter>
        <ensures inheritedFrom="M:Microsoft.Cci.IMethodBody.get_MethodDefinition" inheritedFromTypeName="IMethodBody" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:Microsoft.Cci.ILToCodeModel.SourceMethodBody.Microsoft#Cci#IMethodBody#Operations">
      <getter>
        <ensures inheritedFrom="M:Microsoft.Cci.IMethodBody.get_Operations" inheritedFromTypeName="IMethodBody" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
        <ensures inheritedFrom="M:Microsoft.Cci.IMethodBody.get_Operations" inheritedFromTypeName="IMethodBody" csharp="for all x in result x != null" vb="for all x in result x &lt;&gt; Nothing">for all x in result x != null</ensures>
      </getter>
    </member>
    <member name="P:Microsoft.Cci.ILToCodeModel.SourceMethodBody.Microsoft#Cci#IMethodBody#PrivateHelperTypes">
      <getter>
        <ensures inheritedFrom="M:Microsoft.Cci.IMethodBody.get_PrivateHelperTypes" inheritedFromTypeName="IMethodBody" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
        <ensures inheritedFrom="M:Microsoft.Cci.IMethodBody.get_PrivateHelperTypes" inheritedFromTypeName="IMethodBody" csharp="for all x in result x != null" vb="for all x in result x &lt;&gt; Nothing">for all x in result x != null</ensures>
      </getter>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.CompilationArtifactRemover">
      <invariant>this.numberOfAssignmentsToLocal != null</invariant>
      <invariant>this.numberOfReferencesToLocal != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.CompilationArtifactRemover.#ctor(Microsoft.Cci.ILToCodeModel.SourceMethodBody)">
      <requires csharp="sourceMethodBody != null" vb="sourceMethodBody &lt;&gt; Nothing">sourceMethodBody != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.CompilationArtifactRemover.Rewrite(Microsoft.Cci.IAssignment)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IAssignment)" inheritedFromTypeName="CodeRewriter" csharp="assignment != null" vb="assignment &lt;&gt; Nothing">assignment != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IAssignment)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.CompilationArtifactRemover.Rewrite(Microsoft.Cci.IBlockExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IBlockExpression)" inheritedFromTypeName="CodeRewriter" csharp="blockExpression != null" vb="blockExpression &lt;&gt; Nothing">blockExpression != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IBlockExpression)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.CompilationArtifactRemover.RewriteChildren(Microsoft.Cci.MutableCodeModel.BlockStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.BlockStatement)" inheritedFromTypeName="CodeRewriter" csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.CompilationArtifactRemover.Rewrite(Microsoft.Cci.IBoundExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IBoundExpression)" inheritedFromTypeName="CodeRewriter" csharp="boundExpression != null" vb="boundExpression &lt;&gt; Nothing">boundExpression != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IBoundExpression)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.CompilationArtifactRemover.Rewrite(Microsoft.Cci.IConditionalStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IConditionalStatement)" inheritedFromTypeName="CodeRewriter" csharp="conditionalStatement != null" vb="conditionalStatement &lt;&gt; Nothing">conditionalStatement != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IConditionalStatement)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.CompilationArtifactRemover.Rewrite(Microsoft.Cci.ICreateObjectInstance)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.ICreateObjectInstance)" inheritedFromTypeName="CodeRewriter" csharp="createObjectInstance != null" vb="createObjectInstance &lt;&gt; Nothing">createObjectInstance != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.ICreateObjectInstance)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.CompilationArtifactRemover.Rewrite(Microsoft.Cci.IEquality)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IEquality)" inheritedFromTypeName="CodeRewriter" csharp="equality != null" vb="equality &lt;&gt; Nothing">equality != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IEquality)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.CompilationArtifactRemover.Rewrite(Microsoft.Cci.IExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IExpression)" inheritedFromTypeName="CodeRewriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IExpression)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.CompilationArtifactRemover.Rewrite(Microsoft.Cci.IExpressionStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IExpressionStatement)" inheritedFromTypeName="CodeRewriter" csharp="expressionStatement != null" vb="expressionStatement &lt;&gt; Nothing">expressionStatement != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IExpressionStatement)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.CompilationArtifactRemover.Rewrite(Microsoft.Cci.IGreaterThan)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IGreaterThan)" inheritedFromTypeName="CodeRewriter" csharp="greaterThan != null" vb="greaterThan &lt;&gt; Nothing">greaterThan != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IGreaterThan)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.CompilationArtifactRemover.Rewrite(Microsoft.Cci.ILessThanOrEqual)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.ILessThanOrEqual)" inheritedFromTypeName="CodeRewriter" csharp="lessThanOrEqual != null" vb="lessThanOrEqual &lt;&gt; Nothing">lessThanOrEqual != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.ILessThanOrEqual)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.CompilationArtifactRemover.Rewrite(Microsoft.Cci.ILogicalNot)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.ILogicalNot)" inheritedFromTypeName="CodeRewriter" csharp="logicalNot != null" vb="logicalNot &lt;&gt; Nothing">logicalNot != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.ILogicalNot)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.CompilationArtifactRemover.Rewrite(Microsoft.Cci.IMethodCall)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IMethodCall)" inheritedFromTypeName="CodeRewriter" csharp="methodCall != null" vb="methodCall &lt;&gt; Nothing">methodCall != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IMethodCall)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.CompilationArtifactRemover.Rewrite(Microsoft.Cci.INotEquality)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.INotEquality)" inheritedFromTypeName="CodeRewriter" csharp="notEquality != null" vb="notEquality &lt;&gt; Nothing">notEquality != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.INotEquality)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SingleUseExpressionChecker.ExpressionCanBeMovedAndDoesNotReference(Microsoft.Cci.IExpression,System.Object)">
      <requires csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <requires csharp="definition != null" vb="definition &lt;&gt; Nothing">definition != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SingleUseExpressionChecker.TraverseChildren(Microsoft.Cci.IDupValue)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IDupValue)" inheritedFromTypeName="CodeTraverser" csharp="dupValue != null" vb="dupValue &lt;&gt; Nothing">dupValue != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SingleUseExpressionChecker.TraverseChildren(Microsoft.Cci.ILocalDefinition)">
      <requires inheritedFrom="M:Microsoft.Cci.MetadataTraverser.TraverseChildren(Microsoft.Cci.ILocalDefinition)" inheritedFromTypeName="MetadataTraverser" csharp="localDefinition != null" vb="localDefinition &lt;&gt; Nothing">localDefinition != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SingleUseExpressionChecker.TraverseChildren(Microsoft.Cci.IParameterDefinition)">
      <requires inheritedFrom="M:Microsoft.Cci.MetadataTraverser.TraverseChildren(Microsoft.Cci.IParameterDefinition)" inheritedFromTypeName="MetadataTraverser" csharp="parameterDefinition != null" vb="parameterDefinition &lt;&gt; Nothing">parameterDefinition != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.SingleUseExpressionChecker.TraverseChildren(Microsoft.Cci.IPopValue)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IPopValue)" inheritedFromTypeName="CodeTraverser" csharp="popValue != null" vb="popValue &lt;&gt; Nothing">popValue != null</requires>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.DeclarationUnifier">
      <invariant>this.numberOfReferencesToLocal != null</invariant>
      <invariant>this.numberOfAssignmentsToLocal != null</invariant>
      <invariant>this.declarationFor != null</invariant>
      <invariant>this.firstReferenceToLocal != null</invariant>
      <invariant>this.firstReferenceToLocalContainingStatement != null</invariant>
      <invariant>this.unifiedDeclarations != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.DeclarationUnifier.#ctor(Microsoft.Cci.ILToCodeModel.SourceMethodBody)">
      <requires csharp="sourceMethodBody != null" vb="sourceMethodBody &lt;&gt; Nothing">sourceMethodBody != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.DeclarationUnifier.TraverseChildren(Microsoft.Cci.IBlockStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBlockStatement)" inheritedFromTypeName="CodeTraverser" csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.DeclarationUnifier.TraverseChildren(Microsoft.Cci.IStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IStatement)" inheritedFromTypeName="CodeTraverser" csharp="statement != null" vb="statement &lt;&gt; Nothing">statement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.DeclarationUnifier.TraverseChildren(Microsoft.Cci.IAddressableExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IAddressableExpression)" inheritedFromTypeName="CodeTraverser" csharp="addressableExpression != null" vb="addressableExpression &lt;&gt; Nothing">addressableExpression != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.DeclarationUnifier.TraverseChildren(Microsoft.Cci.IBoundExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBoundExpression)" inheritedFromTypeName="CodeTraverser" csharp="boundExpression != null" vb="boundExpression &lt;&gt; Nothing">boundExpression != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.DeclarationUnifier.TraverseChildren(Microsoft.Cci.ITargetExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ITargetExpression)" inheritedFromTypeName="CodeTraverser" csharp="targetExpression != null" vb="targetExpression &lt;&gt; Nothing">targetExpression != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.PopCounter.TraverseChildren(Microsoft.Cci.IExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IExpression)" inheritedFromTypeName="CodeTraverser" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.MapGenericMethodParameters">
      <invariant>this.genericArguments != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.MapGenericMethodParameters.#ctor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IGenericMethodInstance)">
      <requires csharp="host != null" vb="host &lt;&gt; Nothing">host != null</requires>
      <requires csharp="genericMethodInstance != null" vb="genericMethodInstance &lt;&gt; Nothing">genericMethodInstance != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.MapGenericMethodParameters.Rewrite(Microsoft.Cci.ILocalDefinition)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.ILocalDefinition)" inheritedFromTypeName="MetadataRewriter" csharp="localDefinition != null" vb="localDefinition &lt;&gt; Nothing">localDefinition != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.ILocalDefinition)" inheritedFromTypeName="MetadataRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.MapGenericMethodParameters.Rewrite(Microsoft.Cci.IGenericMethodParameterReference)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IGenericMethodParameterReference)" inheritedFromTypeName="MetadataRewriter" csharp="genericMethodParameterReference != null" vb="genericMethodParameterReference &lt;&gt; Nothing">genericMethodParameterReference != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IGenericMethodParameterReference)" inheritedFromTypeName="MetadataRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.MapGenericMethodParameters.Rewrite(Microsoft.Cci.IMethodReference)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IMethodReference)" inheritedFromTypeName="MetadataRewriter" csharp="methodReference != null" vb="methodReference &lt;&gt; Nothing">methodReference != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IMethodReference)" inheritedFromTypeName="MetadataRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.ReparentAnonymousDelegateParametersAndLocals">
      <invariant>this.method != null</invariant>
      <invariant>this.closureMethod != null</invariant>
      <invariant>this.anonymousDelegate != null</invariant>
      <invariant>this.parameterMap != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ReparentAnonymousDelegateParametersAndLocals.#ctor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IMethodDefinition,Microsoft.Cci.IMethodDefinition,Microsoft.Cci.MutableCodeModel.AnonymousDelegate)">
      <requires csharp="host != null" vb="host &lt;&gt; Nothing">host != null</requires>
      <requires csharp="method != null" vb="method &lt;&gt; Nothing">method != null</requires>
      <requires csharp="closureMethod != null" vb="closureMethod &lt;&gt; Nothing">closureMethod != null</requires>
      <requires csharp="anonymousDelegate != null" vb="anonymousDelegate &lt;&gt; Nothing">anonymousDelegate != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ReparentAnonymousDelegateParametersAndLocals.Rewrite(Microsoft.Cci.IParameterDefinition)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IParameterDefinition)" inheritedFromTypeName="MetadataRewriter" csharp="parameterDefinition != null" vb="parameterDefinition &lt;&gt; Nothing">parameterDefinition != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IParameterDefinition)" inheritedFromTypeName="MetadataRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ReparentAnonymousDelegateParametersAndLocals.RewriteReference(Microsoft.Cci.IParameterDefinition)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteReference(Microsoft.Cci.IParameterDefinition)" inheritedFromTypeName="MetadataRewriter" csharp="parameterDefinition != null" vb="parameterDefinition &lt;&gt; Nothing">parameterDefinition != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteReference(Microsoft.Cci.IParameterDefinition)" inheritedFromTypeName="MetadataRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ReparentAnonymousDelegateParametersAndLocals.RewriteChildren(Microsoft.Cci.MutableCodeModel.LocalDefinition)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.LocalDefinition)" inheritedFromTypeName="MetadataRewriter" csharp="localDefinition != null" vb="localDefinition &lt;&gt; Nothing">localDefinition != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ReparentAnonymousDelegateParametersAndLocals.RewriteChildren(Microsoft.Cci.MutableCodeModel.ThisReference)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.ThisReference)" inheritedFromTypeName="CodeRewriter" csharp="thisReference != null" vb="thisReference &lt;&gt; Nothing">thisReference != null</requires>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.ClosureRemover">
      <invariant>this.closures != null</invariant>
      <invariant>this.closureFieldToLocalOrParameterMap != null</invariant>
      <invariant>this.numberOfAssignmentsToLocal != null</invariant>
      <invariant>this.numberOfReferencesToLocal != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ClosureRemover.#ctor(Microsoft.Cci.ILToCodeModel.SourceMethodBody,Microsoft.Cci.UtilityDataStructures.Hashtable{System.Object},Microsoft.Cci.UtilityDataStructures.Hashtable{Microsoft.Cci.MutableCodeModel.Expression})">
      <requires csharp="body != null" vb="body &lt;&gt; Nothing">body != null</requires>
      <requires csharp="closures != null" vb="closures &lt;&gt; Nothing">closures != null</requires>
      <requires csharp="closureFieldToLocalOrParameterMap != null" vb="closureFieldToLocalOrParameterMap &lt;&gt; Nothing">closureFieldToLocalOrParameterMap != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ClosureRemover.Rewrite(Microsoft.Cci.IAddressableExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IAddressableExpression)" inheritedFromTypeName="CodeRewriter" csharp="addressableExpression != null" vb="addressableExpression &lt;&gt; Nothing">addressableExpression != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IAddressableExpression)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ClosureRemover.Rewrite(Microsoft.Cci.IBoundExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IBoundExpression)" inheritedFromTypeName="CodeRewriter" csharp="boundExpression != null" vb="boundExpression &lt;&gt; Nothing">boundExpression != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IBoundExpression)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ClosureRemover.Rewrite(Microsoft.Cci.IExpressionStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IExpressionStatement)" inheritedFromTypeName="CodeRewriter" csharp="expressionStatement != null" vb="expressionStatement &lt;&gt; Nothing">expressionStatement != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IExpressionStatement)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ClosureRemover.Rewrite(Microsoft.Cci.ILocalDeclarationStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.ILocalDeclarationStatement)" inheritedFromTypeName="CodeRewriter" csharp="localDeclarationStatement != null" vb="localDeclarationStatement &lt;&gt; Nothing">localDeclarationStatement != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.ILocalDeclarationStatement)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ClosureRemover.Rewrite(Microsoft.Cci.IPopValue)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IPopValue)" inheritedFromTypeName="CodeRewriter" csharp="popValue != null" vb="popValue &lt;&gt; Nothing">popValue != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IPopValue)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ClosureRemover.Rewrite(Microsoft.Cci.IPushStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IPushStatement)" inheritedFromTypeName="CodeRewriter" csharp="pushStatement != null" vb="pushStatement &lt;&gt; Nothing">pushStatement != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.IPushStatement)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.ClosureRemover.Rewrite(Microsoft.Cci.ITargetExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.ITargetExpression)" inheritedFromTypeName="CodeRewriter" csharp="targetExpression != null" vb="targetExpression &lt;&gt; Nothing">targetExpression != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.ITargetExpression)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.AnonymousDelegateInserter">
      <invariant>this.sourceMethodBody != null</invariant>
      <invariant>this.containingMethod != null</invariant>
      <invariant>this.numberOfAssignmentsToLocal != null</invariant>
      <invariant>this.numberOfReferencesToLocal != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.AnonymousDelegateInserter.#ctor(Microsoft.Cci.ILToCodeModel.SourceMethodBody)">
      <requires csharp="sourceMethodBody != null" vb="sourceMethodBody &lt;&gt; Nothing">sourceMethodBody != null</requires>
      <requires csharp="sourceMethodBody.ilMethodBody != null" vb="sourceMethodBody.ilMethodBody &lt;&gt; Nothing">sourceMethodBody.ilMethodBody != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.AnonymousDelegateInserter.InsertAnonymousDelegates(Microsoft.Cci.IBlockStatement,System.Boolean@)">
      <requires csharp="block != null" vb="block &lt;&gt; Nothing">block != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.AnonymousDelegateInserter.RewriteChildren(Microsoft.Cci.MutableCodeModel.Assignment)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.Assignment)" inheritedFromTypeName="CodeRewriter" csharp="assignment != null" vb="assignment &lt;&gt; Nothing">assignment != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.AnonymousDelegateInserter.RewriteChildren(Microsoft.Cci.MutableCodeModel.ConditionalStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.ConditionalStatement)" inheritedFromTypeName="CodeRewriter" csharp="conditionalStatement != null" vb="conditionalStatement &lt;&gt; Nothing">conditionalStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.AnonymousDelegateInserter.Rewrite(Microsoft.Cci.ICreateDelegateInstance)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.ICreateDelegateInstance)" inheritedFromTypeName="CodeRewriter" csharp="createDelegateInstance != null" vb="createDelegateInstance &lt;&gt; Nothing">createDelegateInstance != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.CodeRewriter.Rewrite(Microsoft.Cci.ICreateDelegateInstance)" inheritedFromTypeName="CodeRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.AnonymousDelegateInserter.Rewrite(Microsoft.Cci.ITypeReference)">
      <requires inheritedFrom="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.ITypeReference)" inheritedFromTypeName="MetadataRewriter" csharp="typeReference != null" vb="typeReference &lt;&gt; Nothing">typeReference != null</requires>
      <ensures inheritedFrom="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.ITypeReference)" inheritedFromTypeName="MetadataRewriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.AnonymousDelegateInserter.ConvertToAnonymousDelegate(Microsoft.Cci.IMethodDefinition,Microsoft.Cci.ITypeReference)">
      <requires csharp="closureMethod != null" vb="closureMethod &lt;&gt; Nothing">closureMethod != null</requires>
      <requires csharp="!(closureMethod is Microsoft.Cci.Dummy)" vb="Not closureMethod Is Microsoft.Cci.Dummy">!(closureMethod is Microsoft.Cci.Dummy)</requires>
      <requires csharp="delegateType != null" vb="delegateType &lt;&gt; Nothing">delegateType != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.AnonymousDelegateInserter.GetCopyOfBody(Microsoft.Cci.IMethodDefinition)">
      <requires csharp="delegateMethod != null" vb="delegateMethod &lt;&gt; Nothing">delegateMethod != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.AnonymousDelegateInserter.AddToPrivateHelperMethodsToRemove(Microsoft.Cci.IMethodDefinition)">
      <requires csharp="methodToRemove != null" vb="methodToRemove &lt;&gt; Nothing">methodToRemove != null</requires>
    </member>
    <member name="T:Microsoft.Cci.ILToCodeModel.TypeInferencer">
      <invariant>this.containingType != null</invariant>
      <invariant>this.host != null</invariant>
      <invariant>this.platformType != null</invariant>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.#ctor(Microsoft.Cci.INamedTypeReference,Microsoft.Cci.IMetadataHost)">
      <requires csharp="containingType != null" vb="containingType &lt;&gt; Nothing">containingType != null</requires>
      <requires csharp="host != null" vb="host &lt;&gt; Nothing">host != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.GetBinaryNumericOperationType(Microsoft.Cci.IBinaryOperation,System.Boolean)">
      <requires csharp="binaryOperation != null" vb="binaryOperation &lt;&gt; Nothing">binaryOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.GetBinaryNumericOperationType(Microsoft.Cci.IBinaryOperation)">
      <requires csharp="binaryOperation != null" vb="binaryOperation &lt;&gt; Nothing">binaryOperation != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.GetBitwiseOperationType(Microsoft.Cci.IBinaryOperation)">
      <requires csharp="binaryOperation != null" vb="binaryOperation &lt;&gt; Nothing">binaryOperation != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IAddition)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IAddition)" inheritedFromTypeName="CodeTraverser" csharp="addition != null" vb="addition &lt;&gt; Nothing">addition != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IAddressableExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IAddressableExpression)" inheritedFromTypeName="CodeTraverser" csharp="addressableExpression != null" vb="addressableExpression &lt;&gt; Nothing">addressableExpression != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IAddressOf)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IAddressOf)" inheritedFromTypeName="CodeTraverser" csharp="addressOf != null" vb="addressOf &lt;&gt; Nothing">addressOf != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IAddressDereference)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IAddressDereference)" inheritedFromTypeName="CodeTraverser" csharp="addressDereference != null" vb="addressDereference &lt;&gt; Nothing">addressDereference != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IArrayIndexer)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IArrayIndexer)" inheritedFromTypeName="CodeTraverser" csharp="arrayIndexer != null" vb="arrayIndexer &lt;&gt; Nothing">arrayIndexer != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IAssignment)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IAssignment)" inheritedFromTypeName="CodeTraverser" csharp="assignment != null" vb="assignment &lt;&gt; Nothing">assignment != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IBinaryOperation)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBinaryOperation)" inheritedFromTypeName="CodeTraverser" csharp="binaryOperation != null" vb="binaryOperation &lt;&gt; Nothing">binaryOperation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IBitwiseAnd)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBitwiseAnd)" inheritedFromTypeName="CodeTraverser" csharp="bitwiseAnd != null" vb="bitwiseAnd &lt;&gt; Nothing">bitwiseAnd != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IBitwiseOr)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBitwiseOr)" inheritedFromTypeName="CodeTraverser" csharp="bitwiseOr != null" vb="bitwiseOr &lt;&gt; Nothing">bitwiseOr != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IBlockExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBlockExpression)" inheritedFromTypeName="CodeTraverser" csharp="blockExpression != null" vb="blockExpression &lt;&gt; Nothing">blockExpression != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IBoundExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBoundExpression)" inheritedFromTypeName="CodeTraverser" csharp="boundExpression != null" vb="boundExpression &lt;&gt; Nothing">boundExpression != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.ICastIfPossible)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ICastIfPossible)" inheritedFromTypeName="CodeTraverser" csharp="castIfPossible != null" vb="castIfPossible &lt;&gt; Nothing">castIfPossible != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.ICheckIfInstance)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ICheckIfInstance)" inheritedFromTypeName="CodeTraverser" csharp="checkIfInstance != null" vb="checkIfInstance &lt;&gt; Nothing">checkIfInstance != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IConversion)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IConversion)" inheritedFromTypeName="CodeTraverser" csharp="conversion != null" vb="conversion &lt;&gt; Nothing">conversion != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.ICompileTimeConstant)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ICompileTimeConstant)" inheritedFromTypeName="CodeTraverser" csharp="constant != null" vb="constant &lt;&gt; Nothing">constant != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IConditional)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IConditional)" inheritedFromTypeName="CodeTraverser" csharp="conditional != null" vb="conditional &lt;&gt; Nothing">conditional != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.FixUpType(Microsoft.Cci.MutableCodeModel.Conditional)">
      <requires csharp="conditional != null" vb="conditional &lt;&gt; Nothing">conditional != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IConditionalStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IConditionalStatement)" inheritedFromTypeName="CodeTraverser" csharp="conditionalStatement != null" vb="conditionalStatement &lt;&gt; Nothing">conditionalStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.Convert(Microsoft.Cci.IExpression,Microsoft.Cci.ITypeReference)">
      <requires csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <requires csharp="targetType != null" vb="targetType &lt;&gt; Nothing">targetType != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.ConvertToBoolean(Microsoft.Cci.IExpression)">
      <requires csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.ConvertToCharacter(Microsoft.Cci.IExpression)">
      <requires csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.ICreateArray)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ICreateArray)" inheritedFromTypeName="CodeTraverser" csharp="createArray != null" vb="createArray &lt;&gt; Nothing">createArray != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.ICreateDelegateInstance)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ICreateDelegateInstance)" inheritedFromTypeName="CodeTraverser" csharp="createDelegateInstance != null" vb="createDelegateInstance &lt;&gt; Nothing">createDelegateInstance != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.ICreateObjectInstance)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ICreateObjectInstance)" inheritedFromTypeName="CodeTraverser" csharp="createObjectInstance != null" vb="createObjectInstance &lt;&gt; Nothing">createObjectInstance != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IDefaultValue)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IDefaultValue)" inheritedFromTypeName="CodeTraverser" csharp="defaultValue != null" vb="defaultValue &lt;&gt; Nothing">defaultValue != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IDivision)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IDivision)" inheritedFromTypeName="CodeTraverser" csharp="division != null" vb="division &lt;&gt; Nothing">division != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IEquality)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IEquality)" inheritedFromTypeName="CodeTraverser" csharp="equality != null" vb="equality &lt;&gt; Nothing">equality != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IExclusiveOr)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IExclusiveOr)" inheritedFromTypeName="CodeTraverser" csharp="exclusiveOr != null" vb="exclusiveOr &lt;&gt; Nothing">exclusiveOr != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IGetTypeOfTypedReference)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IGetTypeOfTypedReference)" inheritedFromTypeName="CodeTraverser" csharp="getTypeOfTypedReference != null" vb="getTypeOfTypedReference &lt;&gt; Nothing">getTypeOfTypedReference != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IGetValueOfTypedReference)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IGetValueOfTypedReference)" inheritedFromTypeName="CodeTraverser" csharp="getValueOfTypedReference != null" vb="getValueOfTypedReference &lt;&gt; Nothing">getValueOfTypedReference != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IGreaterThan)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IGreaterThan)" inheritedFromTypeName="CodeTraverser" csharp="greaterThan != null" vb="greaterThan &lt;&gt; Nothing">greaterThan != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IGreaterThanOrEqual)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IGreaterThanOrEqual)" inheritedFromTypeName="CodeTraverser" csharp="greaterThanOrEqual != null" vb="greaterThanOrEqual &lt;&gt; Nothing">greaterThanOrEqual != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.ILeftShift)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ILeftShift)" inheritedFromTypeName="CodeTraverser" csharp="leftShift != null" vb="leftShift &lt;&gt; Nothing">leftShift != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.ILessThan)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ILessThan)" inheritedFromTypeName="CodeTraverser" csharp="lessThan != null" vb="lessThan &lt;&gt; Nothing">lessThan != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.ILessThanOrEqual)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ILessThanOrEqual)" inheritedFromTypeName="CodeTraverser" csharp="lessThanOrEqual != null" vb="lessThanOrEqual &lt;&gt; Nothing">lessThanOrEqual != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.ILogicalNot)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ILogicalNot)" inheritedFromTypeName="CodeTraverser" csharp="logicalNot != null" vb="logicalNot &lt;&gt; Nothing">logicalNot != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IMakeTypedReference)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IMakeTypedReference)" inheritedFromTypeName="CodeTraverser" csharp="makeTypedReference != null" vb="makeTypedReference &lt;&gt; Nothing">makeTypedReference != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IMetadataCreateArray)">
      <requires inheritedFrom="M:Microsoft.Cci.MetadataTraverser.TraverseChildren(Microsoft.Cci.IMetadataCreateArray)" inheritedFromTypeName="MetadataTraverser" csharp="createArray != null" vb="createArray &lt;&gt; Nothing">createArray != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IMetadataConstant)">
      <requires inheritedFrom="M:Microsoft.Cci.MetadataTraverser.TraverseChildren(Microsoft.Cci.IMetadataConstant)" inheritedFromTypeName="MetadataTraverser" csharp="constant != null" vb="constant &lt;&gt; Nothing">constant != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IMetadataTypeOf)">
      <requires inheritedFrom="M:Microsoft.Cci.MetadataTraverser.TraverseChildren(Microsoft.Cci.IMetadataTypeOf)" inheritedFromTypeName="MetadataTraverser" csharp="typeOf != null" vb="typeOf &lt;&gt; Nothing">typeOf != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IMetadataNamedArgument)">
      <requires inheritedFrom="M:Microsoft.Cci.MetadataTraverser.TraverseChildren(Microsoft.Cci.IMetadataNamedArgument)" inheritedFromTypeName="MetadataTraverser" csharp="namedArgument != null" vb="namedArgument &lt;&gt; Nothing">namedArgument != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IMethodCall)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IMethodCall)" inheritedFromTypeName="CodeTraverser" csharp="methodCall != null" vb="methodCall &lt;&gt; Nothing">methodCall != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IModulus)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IModulus)" inheritedFromTypeName="CodeTraverser" csharp="modulus != null" vb="modulus &lt;&gt; Nothing">modulus != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IMultiplication)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IMultiplication)" inheritedFromTypeName="CodeTraverser" csharp="multiplication != null" vb="multiplication &lt;&gt; Nothing">multiplication != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.INamedArgument)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.INamedArgument)" inheritedFromTypeName="CodeTraverser" csharp="namedArgument != null" vb="namedArgument &lt;&gt; Nothing">namedArgument != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.INotEquality)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.INotEquality)" inheritedFromTypeName="CodeTraverser" csharp="notEquality != null" vb="notEquality &lt;&gt; Nothing">notEquality != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IOldValue)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IOldValue)" inheritedFromTypeName="CodeTraverser" csharp="oldValue != null" vb="oldValue &lt;&gt; Nothing">oldValue != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IOnesComplement)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IOnesComplement)" inheritedFromTypeName="CodeTraverser" csharp="onesComplement != null" vb="onesComplement &lt;&gt; Nothing">onesComplement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IOutArgument)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IOutArgument)" inheritedFromTypeName="CodeTraverser" csharp="outArgument != null" vb="outArgument &lt;&gt; Nothing">outArgument != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IPointerCall)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IPointerCall)" inheritedFromTypeName="CodeTraverser" csharp="pointerCall != null" vb="pointerCall &lt;&gt; Nothing">pointerCall != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IRefArgument)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IRefArgument)" inheritedFromTypeName="CodeTraverser" csharp="refArgument != null" vb="refArgument &lt;&gt; Nothing">refArgument != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IReturnValue)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IReturnValue)" inheritedFromTypeName="CodeTraverser" csharp="returnValue != null" vb="returnValue &lt;&gt; Nothing">returnValue != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IRightShift)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IRightShift)" inheritedFromTypeName="CodeTraverser" csharp="rightShift != null" vb="rightShift &lt;&gt; Nothing">rightShift != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IRuntimeArgumentHandleExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IRuntimeArgumentHandleExpression)" inheritedFromTypeName="CodeTraverser" csharp="runtimeArgumentHandleExpression != null" vb="runtimeArgumentHandleExpression &lt;&gt; Nothing">runtimeArgumentHandleExpression != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.ISizeOf)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ISizeOf)" inheritedFromTypeName="CodeTraverser" csharp="sizeOf != null" vb="sizeOf &lt;&gt; Nothing">sizeOf != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IStackArrayCreate)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IStackArrayCreate)" inheritedFromTypeName="CodeTraverser" csharp="stackArrayCreate != null" vb="stackArrayCreate &lt;&gt; Nothing">stackArrayCreate != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.ISubtraction)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ISubtraction)" inheritedFromTypeName="CodeTraverser" csharp="subtraction != null" vb="subtraction &lt;&gt; Nothing">subtraction != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.ITargetExpression)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ITargetExpression)" inheritedFromTypeName="CodeTraverser" csharp="targetExpression != null" vb="targetExpression &lt;&gt; Nothing">targetExpression != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IThisReference)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IThisReference)" inheritedFromTypeName="CodeTraverser" csharp="thisReference != null" vb="thisReference &lt;&gt; Nothing">thisReference != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.ITokenOf)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ITokenOf)" inheritedFromTypeName="CodeTraverser" csharp="tokenOf != null" vb="tokenOf &lt;&gt; Nothing">tokenOf != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.ITypeOf)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ITypeOf)" inheritedFromTypeName="CodeTraverser" csharp="typeOf != null" vb="typeOf &lt;&gt; Nothing">typeOf != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IUnaryNegation)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IUnaryNegation)" inheritedFromTypeName="CodeTraverser" csharp="unaryNegation != null" vb="unaryNegation &lt;&gt; Nothing">unaryNegation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IUnaryPlus)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IUnaryPlus)" inheritedFromTypeName="CodeTraverser" csharp="unaryPlus != null" vb="unaryPlus &lt;&gt; Nothing">unaryPlus != null</requires>
    </member>
    <member name="M:Microsoft.Cci.ILToCodeModel.TypeInferencer.TraverseChildren(Microsoft.Cci.IVectorLength)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IVectorLength)" inheritedFromTypeName="CodeTraverser" csharp="vectorLength != null" vb="vectorLength &lt;&gt; Nothing">vectorLength != null</requires>
    </member>
  </members>
</doc>