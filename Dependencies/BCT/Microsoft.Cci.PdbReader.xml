<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Cci.PdbReader</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Cci.ReadOnlyList`1">
            <summary>
            Fixed size array wrapped as IReadOnlyList{T}
            Construct with known size N, call Add N times, Freeze, and then use as IReadOnlyList{T} or IEnumerable{T}
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>Optimization for List list = new List{T}(); list.Add() list.Add() ...; list.TrimExcess(); list.AsReadOnly() </remarks>
        </member>
        <member name="M:Microsoft.Cci.ReadOnlyList`1.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ReadOnlyList`1.Create(System.UInt32)">
            <summary>
            Creation helper
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ReadOnlyList`1.Create(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creation helper from IEnumerable{T}
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ReadOnlyList`1.Freeze(Microsoft.Cci.ReadOnlyList{`0})">
            <summary>
            Freeze to be read-only
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ReadOnlyList`1.Add(`0)">
            <summary>
            Append item
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ReadOnlyList`1.Count">
            <summary>
            Count of total allowed items
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ReadOnlyList`1.Item(System.Int32)">
            <summary>
            Return an item
            </summary>
        </member>
        <member name="T:Microsoft.Cci.VirtualReadOnlyList`1">
             <summary>
             Virtual IReadOnlyList + its enumerator
             </summary>
             <remarks>Borrowed from the internal implementation of "yield return", IEnumerable and IEnumerator are implemented in the 
             same class here, to save one extra allocation for the most common usage pattern of single enumerator in the same thread.
            
             This class is used mostly by SingletonList. There are quite a few CCI objects which store single object inside by needs to return IEnumerable from it.
             This is used in super high frequency (e.g. BaseClasses) that we need to reduce memory allocation and CPU cost for it.
            
             This solution is better replacement for GetSingletonEnumerable which just uses "yield return":
             1) There only needs to be single implementation.
             2) All the source code is here.
             3) IReadOnlyList is implemented so caller can query for Count and this[index] without going through enumerator at all.
             </remarks>
             <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Cci.VirtualReadOnlyList`1.GetItem(System.Int32)">
            <summary>
            One method to be implemented in derived classes
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ReadOnlyListEnumerator`1">
            <summary>
            Enumerator for IReadOnlyList
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.Cci.SingletonList`1">
            <summary>
            IReadOnlyList wrapper for single item, + its enumerator (similar to yield return)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.Cci.StringBuilderCache">
            <summary>
            Caching 10 StringBuilders per thread (for nested usage)
            </summary>
        </member>
        <member name="M:Microsoft.Cci.StringBuilderCache.GetList">
            <summary>
            Get StringBuilder array
            </summary>
        </member>
        <member name="M:Microsoft.Cci.StringBuilderCache.Acquire">
            <summary>
            Acquire a StringBuilder
            </summary>
        </member>
        <member name="M:Microsoft.Cci.StringBuilderCache.Release(System.Text.StringBuilder)">
            <summary>
            Release StringBuilder to cache
            </summary>
        </member>
        <member name="M:Microsoft.Cci.StringBuilderCache.GetStringAndRelease(System.Text.StringBuilder)">
            <summary>
            Release StringBuilder to cache, after getting string from it
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ArrayT`1">
            <summary>
            Array related helpers
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Cci.Toolbox.ToReadOnly``1(System.Collections.Generic.List{``0})">
            <summary>
            Getting read-only IEnumerable{T} from List{T}
            Read-only is only enforced in DEBUG build to catch programming errors. In release mode, we just return the original list for performance
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Cci.EnumerableAdapter`1">
            <summary>
            Wrapper around IEnumerable{T}, optimized for IReadOnlyList{T}
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.Cci.Pdb.PdbConstant">
            <summary />
        </member>
        <member name="T:Microsoft.Cci.PdbReader">
            <summary>
            An object that can map offsets in an IL stream to source locations and block scopes.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PdbReader.#ctor(System.IO.Stream,Microsoft.Cci.IMetadataHost,System.Boolean)">
            <summary>
            Allocates an object that can map some kinds of ILocation objects to IPrimarySourceLocation objects. 
            For example, a PDB reader that maps offsets in an IL stream to source locations.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PdbReader.#ctor(System.IO.Stream,Microsoft.Cci.IMetadataHost)">
            <summary>
            Allocates an object that can map some kinds of ILocation objects to IPrimarySourceLocation objects. 
            For example, a PDB reader that maps offsets in an IL stream to source locations.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PdbReader.Dispose">
            <summary>
            Closes all of the source files that have been opened to provide the contents source locations corresponding to IL offsets.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PdbReader.Finalize">
            <summary>
            Closes all of the source files that have been opened to provide the contents source locations corresponding to IL offsets.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PdbReader.GetSourceFiles">
            <summary>
            Gets all source files that this pdb file is referencing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.PdbReader.GetPrimarySourceLocationsFor(System.Collections.Generic.IEnumerable{Microsoft.Cci.ILocation})">
            <summary>
            Return zero or more locations in primary source documents that correspond to one or more of the given derived (non primary) document locations.
            </summary>
            <param name="locations">Zero or more locations in documents that have been derived from one or more source documents.</param>
        </member>
        <member name="M:Microsoft.Cci.PdbReader.GetClosestPrimarySourceLocationsFor(System.Collections.Generic.IEnumerable{Microsoft.Cci.ILocation})">
            <summary>
            Return zero or more locations in primary source documents that are the closest to corresponding to one or more of the given derived (non primary) document locations.
            </summary>
            <param name="locations">Zero or more locations in documents that have been derived from one or more source documents.</param>
        </member>
        <member name="M:Microsoft.Cci.PdbReader.GetPrimarySourceLocationsFor(Microsoft.Cci.ILocation)">
            <summary>
            Return zero or more locations in primary source documents that correspond to the given derived (non primary) document location.
            </summary>
            <param name="location">A location in a document that have been derived from one or more source documents.</param>
        </member>
        <member name="M:Microsoft.Cci.PdbReader.GetClosestPrimarySourceLocationsFor(Microsoft.Cci.ILocation)">
            <summary>
            Return zero or more locations in primary source documents that are the closest to corresponding to the given derived (non primary) document location.
            </summary>
            <param name="location">A location in a document that have been derived from one or more source documents.</param>
        </member>
        <member name="M:Microsoft.Cci.PdbReader.GetPrimarySourceLocationsForToken(System.UInt32)">
            <summary>
            Returns zero or more locations in primary source documents that correspond to the definition with the given token.
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.PdbReader.GetPrimarySourceLocationsForDefinitionOf(Microsoft.Cci.ILocalDefinition)">
            <summary>
            Return zero or more locations in primary source documents that correspond to the definition of the given local.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PdbReader.GetSourceNameFor(Microsoft.Cci.ILocalDefinition,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="localDefinition"></param>
            <param name="isCompilerGenerated"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.PdbReader.GetIteratorScopes(Microsoft.Cci.IMethodBody)">
            <summary>
            Returns zero or more local (block) scopes, each defining an IL range in which an iterator local is defined.
            The scopes are returned by the MoveNext method of the object returned by the iterator method.
            The index of the scope corresponds to the index of the local. Specifically local scope i corresponds
            to the local stored in field &lt;localName&gt;x_i of the class used to store the local values in between
            calls to MoveNext.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PdbReader.GetLocalScopes(Microsoft.Cci.IMethodBody)">
            <summary>
            Returns zero or more lexical scopes into which the CLR IL operations in the given method body is organized.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PdbReader.GetConstantsInScope(Microsoft.Cci.ILocalScope)">
            <summary>
            Returns zero or more local constant definitions that are local to the given scope.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PdbReader.GetVariablesInScope(Microsoft.Cci.ILocalScope)">
            <summary>
            Returns zero or more local variable definitions that are local to the given scope.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PdbReader.GetNamespaceScopes(Microsoft.Cci.IMethodBody)">
            <summary>
            Returns zero or more namespace scopes into which the namespace type containing the given method body has been nested.
            These scopes determine how simple names are looked up inside the method body. There is a separate scope for each dotted
            component in the namespace type name. For istance namespace type x.y.z will have two namespace scopes, the first is for the x and the second
            is for the y.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PdbReader.IsIterator(Microsoft.Cci.IMethodBody)">
            <summary>
            Returns true if the method body is an iterator, in which case the scope information should be retrieved from the object
            returned by the method.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PdbReader.GetSynchronizationInformation(Microsoft.Cci.IMethodBody)">
            <summary>
            If the given method body is the "MoveNext" method of the state class of an asynchronous method, the returned
            object describes where synchronization points occur in the IL operations of the "MoveNext" method. Otherwise
            the result is null.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PdbReader.LocationWithSmallerOffset(Microsoft.Cci.ILocation,Microsoft.Cci.ILocation)">
            <summary>
            Returns the location that has the smaller IL offset. If only one of the two locations
            is a PdbReader supplied location that one is returned. If neither is a PdbReader supplied location, the first
            location is returned.
            </summary>
            <param name="location1">A document location. Typically one obtained from the PdbReader.</param>
            <param name="location2">A document location. Typically one obtained from the PdbReader.</param>
        </member>
        <member name="P:Microsoft.Cci.PdbReader.SourceServerData">
            <summary>
             Retrieves the Source Server Data block, if present.
             Otherwise the empty string is returned.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PdbReader.DebugInformationVersion">
            <summary>
             Returns the PDB signature and age as a concatenated string. This can be compared with
             IModule.DebugInformationVersion to verify whether a PDB is valid for a given assembly.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.Pdb.PdbSourceDocument">
            <summary>
            A primary source document that is referenced by a pdb file and that is used to provide source context to lines from compiled CLR modules with
            associated PDB files.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Pdb.PdbSourceDocument.#ctor(Microsoft.Cci.IName,Microsoft.Cci.Pdb.PdbSource,System.IO.StreamReader)">
            <summary>
            Allocates an object that represents a source document, such as file, which is parsed according to the rules of a particular langauge, 
            such as C#, to produce an object model.
            </summary>
            <param name="name">The name of the document. Used to identify the document in user interaction.</param>
            <param name="pdbSourceFile">Information about the document, such as its location.</param>
            <param name="streamReader">A StreamReader instance whose BaseStream produces the contents of the document.</param>
        </member>
        <member name="M:Microsoft.Cci.Pdb.PdbSourceDocument.#ctor(Microsoft.Cci.IName,Microsoft.Cci.Pdb.PdbSource)">
            <summary>
            Allocates an object that represents a source document, such as file, which is parsed according to the rules of a particular langauge, 
            such as C#, to produce an object model.
            </summary>
            <param name="name">The name of the document. Used to identify the document in user interaction.</param>
            <param name="pdbSourceFile">Information about the document, such as its location.</param>
        </member>
        <member name="T:Microsoft.Cci.Pdb.PdbSourceLineLocation">
            <summary>
            A range of source text that corresponds to a source line.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Pdb.PdbSourceLineLocation.#ctor(Microsoft.Cci.Pdb.PdbSourceDocument,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates a range of source text that corresponds to a source line.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Pdb.PdbSourceLineLocation.EndColumn">
            <summary>
            The last column in the last line of the range.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Pdb.PdbSourceLineLocation.EndLine">
            <summary>
            The last line of the range.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Pdb.PdbSourceLineLocation.PrimarySourceDocument">
            <summary>
            The document containing the source text of which this location is a subrange.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Pdb.PdbSourceLineLocation.StartColumn">
            <summary>
            The first column in the first line of the range.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Pdb.PdbSourceLineLocation.StartLine">
            <summary>
            The first line of the range.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.Pdb.PdbLocalScope">
            <summary>
            A range of CLR IL operations that comprise a lexical scope, specified as an IL offset and a length.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Pdb.PdbLocalScope.#ctor(Microsoft.Cci.IMethodBody,Microsoft.Cci.Pdb.PdbScope)">
            <summary>
            Allocates a range of CLR IL operations that comprise a lexical scope, specified as an IL offset and a length.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Pdb.PdbLocalScope.Offset">
            <summary>
            The offset of the first operation in the scope.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Pdb.PdbLocalScope.Length">
            <summary>
            The length of the scope. Offset+Length equals the offset of the first operation outside the scope, or equals the method body length.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Pdb.PdbLocalScope.MethodDefinition">
            <summary>
            The definition of the method in which this local scope is defined.
            </summary>
        </member>
    </members>
</doc>
